"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkhumejs"] = self["webpackChunkhumejs"] || []).push([["src_lib_algos_component2_js"],{

/***/ "./src/lib/algos/component2.js":
/*!*************************************!*\
  !*** ./src/lib/algos/component2.js ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QuantumStateViewer: () => (/* binding */ QuantumStateViewer)\n/* harmony export */ });\n/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ \"./node_modules/lit/index.js\");\n/* harmony import */ var mathjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mathjs */ \"./node_modules/mathjs/lib/esm/entry/pureFunctionsAny.generated.js\");\n\n\n\nconst gates = {\n  X: [\n    [0, 1],\n    [1, 0],\n  ],\n  Z: [\n    [1, 0],\n    [0, -1],\n  ],\n  Y: [\n    [0, mathjs__WEBPACK_IMPORTED_MODULE_1__.complex(0, -1)],\n    [mathjs__WEBPACK_IMPORTED_MODULE_1__.complex(0, 1), 0],\n  ],\n  H: [\n    [1 / Math.sqrt(2), 1 / Math.sqrt(2)],\n    [1 / Math.sqrt(2), -1 / Math.sqrt(2)],\n  ],\n  Phase: (theta) => [\n    [1, 0],\n    [0, mathjs__WEBPACK_IMPORTED_MODULE_1__.complex(Math.cos(theta), Math.sin(theta))],\n  ],\n  RZ: (theta) => [\n    [mathjs__WEBPACK_IMPORTED_MODULE_1__.complex(Math.cos(theta / 2), -Math.sin(theta / 2)), 0],\n    [0, mathjs__WEBPACK_IMPORTED_MODULE_1__.complex(Math.cos(theta / 2), Math.sin(theta / 2))],\n  ],\n  RX: (theta) => [\n    [Math.cos(theta / 2), mathjs__WEBPACK_IMPORTED_MODULE_1__.complex(0, -Math.sin(theta / 2))],\n    [mathjs__WEBPACK_IMPORTED_MODULE_1__.complex(0, -Math.sin(theta / 2)), Math.cos(theta / 2)],\n  ],\n  RY: (theta) => [\n    [Math.cos(theta / 2), -Math.sin(theta / 2)],\n    [Math.sin(theta / 2), Math.cos(theta / 2)],\n  ],\n  CX: [\n    [0, 1],\n    [1, 0],\n  ],\n  CY: [\n    [0, mathjs__WEBPACK_IMPORTED_MODULE_1__.complex(0, -1)],\n    [mathjs__WEBPACK_IMPORTED_MODULE_1__.complex(0, 1), 0],\n  ],\n  CZ: [\n    [1, 0],\n    [0, -1],\n  ],\n};\n\nconst colormap = [[247, 55, 26], [247, 55, 26], [246, 56, 23], [246, 58, 21], [246, 58, 21], [246, 61, 18], [247, 64, 16], [247, 64, 16], [247, 68, 14], [247, 72, 12], [248, 76, 10], [248, 76, 10], [248, 80, 8], [248, 85, 7], [248, 85, 7], [249, 89, 6], [249, 94, 5], [250, 98, 4], [250, 98, 4], [251, 103, 3], [251, 107, 2], [251, 107, 2], [252, 112, 2], [252, 116, 1], [253, 120, 1], [253, 120, 1], [253, 125, 0], [254, 129, 0], [254, 129, 0], [254, 133, 0], [254, 137, 0], [255, 141, 0], [255, 141, 0], [255, 145, 0], [255, 149, 0], [255, 149, 0], [255, 153, 0], [255, 157, 0], [255, 161, 0], [255, 161, 0], [255, 165, 0], [255, 168, 0], [255, 168, 0], [255, 172, 0], [255, 176, 0], [255, 179, 0], [255, 179, 0], [255, 183, 0], [255, 186, 0], [255, 186, 0], [255, 189, 0], [254, 193, 0], [254, 193, 0], [253, 195, 0], [252, 198, 0], [251, 201, 0], [251, 201, 0], [249, 203, 0], [247, 205, 0], [247, 205, 0], [245, 206, 0], [242, 208, 0], [239, 208, 0], [239, 208, 0], [236, 209, 0], [233, 209, 0], [233, 209, 0], [229, 209, 0], [225, 209, 0], [221, 208, 0], [221, 208, 0], [217, 208, 0], [213, 207, 0], [213, 207, 0], [209, 205, 0], [204, 204, 0], [200, 203, 0], [200, 203, 0], [195, 201, 0], [191, 199, 0], [191, 199, 0], [186, 197, 0], [181, 196, 0], [177, 194, 0], [177, 194, 0], [172, 192, 0], [167, 190, 0], [167, 190, 0], [162, 188, 0], [158, 186, 0], [153, 184, 0], [153, 184, 0], [148, 182, 0], [143, 180, 0], [143, 180, 0], [138, 178, 1], [134, 176, 1], [134, 176, 1], [129, 174, 2], [124, 172, 2], [119, 170, 3], [119, 170, 3], [114, 169, 3], [109, 167, 4], [109, 167, 4], [104, 165, 6], [100, 163, 7], [95, 161, 9], [95, 161, 9], [90, 160, 11], [85, 158, 13], [85, 158, 13], [81, 157, 16], [76, 156, 18], [72, 155, 21], [72, 155, 21], [68, 154, 24], [64, 154, 27], [64, 154, 27], [60, 153, 30], [57, 153, 34], [54, 153, 38], [54, 153, 38], [51, 154, 41], [49, 155, 45], [49, 155, 45], [47, 155, 49], [45, 157, 54], [44, 158, 58], [44, 158, 58], [43, 160, 62], [43, 161, 67], [43, 161, 67], [43, 163, 72], [43, 165, 76], [44, 167, 81], [44, 167, 81], [44, 170, 86], [45, 172, 91], [45, 172, 91], [46, 174, 96], [46, 177, 101], [46, 177, 101], [47, 179, 106], [48, 181, 111], [48, 184, 116], [48, 184, 116], [49, 186, 121], [49, 189, 126], [49, 189, 126], [50, 191, 131], [50, 194, 136], [50, 196, 141], [50, 196, 141], [50, 199, 146], [50, 202, 151], [50, 202, 151], [50, 204, 156], [50, 207, 161], [50, 209, 166], [50, 209, 166], [49, 212, 171], [48, 214, 177], [48, 214, 177], [48, 216, 182], [47, 219, 187], [46, 221, 192], [46, 221, 192], [45, 223, 197], [44, 225, 202], [44, 225, 202], [43, 227, 206], [42, 228, 211], [40, 230, 215], [40, 230, 215], [39, 231, 220], [39, 232, 224], [39, 232, 224], [38, 232, 228], [37, 232, 231], [37, 232, 235], [37, 232, 235], [37, 232, 238], [38, 231, 240], [38, 231, 240], [38, 230, 243], [39, 228, 245], [39, 228, 245], [40, 227, 247], [41, 225, 249], [42, 223, 250], [42, 223, 250], [43, 220, 251], [44, 218, 252], [44, 218, 252], [45, 215, 253], [46, 212, 254], [47, 209, 254], [47, 209, 254], [47, 206, 255], [48, 203, 255], [48, 203, 255], [49, 200, 255], [49, 197, 255], [49, 194, 255], [49, 194, 255], [49, 191, 255], [49, 188, 255], [49, 188, 255], [49, 184, 255], [49, 181, 255], [48, 178, 255], [48, 178, 255], [48, 175, 255], [47, 172, 255], [47, 172, 255], [46, 169, 255], [45, 166, 255], [44, 163, 255], [44, 163, 255], [43, 160, 255], [42, 157, 255], [42, 157, 255], [41, 154, 255], [40, 151, 255], [40, 148, 255], [40, 148, 255], [39, 145, 255], [40, 143, 255], [40, 143, 255], [40, 140, 255], [41, 138, 255], [41, 138, 255], [43, 136, 255], [46, 134, 255], [49, 132, 255], [49, 132, 255], [53, 131, 255], [57, 130, 255], [57, 130, 255], [62, 129, 255], [67, 128, 255], [72, 128, 255], [72, 128, 255], [77, 128, 255], [83, 129, 255], [83, 129, 255], [89, 129, 255], [94, 130, 255], [100, 131, 255], [100, 131, 255], [105, 132, 255], [111, 134, 255], [111, 134, 255], [116, 136, 255], [122, 137, 255], [127, 139, 255], [127, 139, 255], [132, 141, 255], [137, 143, 255], [137, 143, 255], [142, 145, 255], [147, 147, 255], [152, 150, 255], [152, 150, 255], [157, 152, 255], [161, 154, 255], [161, 154, 255], [166, 156, 255], [170, 159, 255], [174, 161, 255], [174, 161, 255], [179, 163, 255], [183, 165, 255], [183, 165, 255], [187, 168, 255], [191, 170, 255], [191, 170, 255], [196, 172, 255], [200, 174, 255], [204, 177, 255], [204, 177, 255], [208, 179, 255], [212, 181, 255], [212, 181, 255], [216, 183, 255], [219, 184, 255], [223, 186, 255], [223, 186, 255], [227, 188, 255], [231, 189, 253], [231, 189, 253], [234, 190, 252], [238, 191, 250], [241, 191, 247], [241, 191, 247], [244, 191, 245], [247, 191, 242], [247, 191, 242], [250, 190, 238], [252, 189, 234], [255, 188, 231], [255, 188, 231], [255, 187, 226], [255, 185, 222], [255, 185, 222], [255, 183, 217], [255, 180, 212], [255, 178, 207], [255, 178, 207], [255, 175, 202], [255, 172, 197], [255, 172, 197], [255, 169, 191], [255, 165, 186], [255, 162, 180], [255, 162, 180], [255, 158, 175], [255, 155, 169], [255, 155, 169], [255, 151, 164], [255, 148, 158], [255, 148, 158], [255, 144, 153], [255, 140, 147], [255, 136, 142], [255, 136, 142], [255, 133, 137], [255, 129, 131], [255, 129, 131], [255, 125, 126], [255, 121, 121], [255, 117, 115], [255, 117, 115], [255, 113, 110], [255, 109, 105], [255, 109, 105], [255, 105, 100], [255, 101, 94], [255, 97, 89], [255, 97, 89], [255, 92, 84], [255, 88, 79], [255, 88, 79], [255, 84, 74], [255, 80, 69], [254, 76, 65], [254, 76, 65], [253, 72, 60], [252, 68, 56], [252, 68, 56], [251, 65, 51], [250, 61, 47], [249, 59, 43], [249, 59, 43], [248, 56, 39], [248, 55, 36], [248, 55, 36], [247, 54, 32], [247, 54, 29]];\n\nfunction complex_to_rgb(c, ints = false) {\n  const a = mathjs__WEBPACK_IMPORTED_MODULE_1__.re(c);\n  const b = mathjs__WEBPACK_IMPORTED_MODULE_1__.im(c);\n  const magnitude = Math.sqrt(a * a + b * b);\n  let hue = (Math.atan2(b, a) / Math.PI) * 180;\n\n  if (hue < 0) {\n    hue += 360;\n  }\n\n  // For example, map hue (0-360) to an index in the colormap array:\n  const index = Math.floor((hue / 360) * (colormap.length - 1));\n  const rgb = colormap[index];\n\n  if (ints) {\n    return rgb;\n  } else {\n    return rgb.map((c) => c / 255);\n  }\n}\n\nfunction* pair_generator(n, t) {\n  const distance = 2 ** t;\n  const suffix_count = 2 ** t;\n  const prefix_count = 2 ** (n - t - 1);\n\n  for (let p = 0; p < prefix_count; p++) {\n    for (let s = 0; s < suffix_count; s++) {\n      const k0 = p * suffix_count * 2 + s;\n      const k1 = k0 + distance;\n      yield [k0, k1];\n    }\n  }\n}\n\nfunction is_bit_set(num, bit) {\n  return (num & (1 << bit)) !== 0;\n}\n\nfunction process_pair(state, gate, k0 = 0, k1 = 1) {\n  const x = state[k0];\n  const y = state[k1];\n  state[k0] = mathjs__WEBPACK_IMPORTED_MODULE_1__.add(mathjs__WEBPACK_IMPORTED_MODULE_1__.multiply(x, gate[0][0]), mathjs__WEBPACK_IMPORTED_MODULE_1__.multiply(y, gate[0][1]));\n  state[k1] = mathjs__WEBPACK_IMPORTED_MODULE_1__.add(mathjs__WEBPACK_IMPORTED_MODULE_1__.multiply(x, gate[1][0]), mathjs__WEBPACK_IMPORTED_MODULE_1__.multiply(y, gate[1][1]));\n}\n\nfunction c_transform(state, c, t, gate) {\n  const n = Math.log2(state.length);\n  for (const [k0, k1] of Array.from(pair_generator(n, t)).filter((p) =>\n    is_bit_set(p[0], c)\n  )) {\n    process_pair(state, gate, k0, k1);\n  }\n}\n\nclass QuantumStateViewer extends lit__WEBPACK_IMPORTED_MODULE_0__.LitElement {\n  static styles = (0,lit__WEBPACK_IMPORTED_MODULE_0__.css)`\n    table {\n      border-collapse: collapse;\n      width: 100%;\n      margin: 20px 0;\n      overflow-x: auto;\n    }\n\n    th,\n    td {\n      border: 1px solid #ddd;\n      text-align: center;\n      padding: 8px;\n      word-wrap: break-word;\n      height: 2vh;\n    }\n\n    th {\n      background-color: #f2f2f2;\n    }\n\n    .amplitude-bar {\n      display: flex;\n      align-items: left;\n      height: 100%;\n    }\n\n    .bar {\n      height: 100%;\n    }\n\n    .buttons {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 15px;\n      margin: 15px 0;\n      justify-content: center;\n      align-items: center;\n    }\n\n    button,\n    select,\n    input {\n      padding: 10px 15px;\n      font-size: 1rem;\n      cursor: pointer;\n    }\n\n    button:disabled {\n      background-color: #ccc;\n      cursor: not-allowed;\n    }\n\n    .highlight {\n      background-color: lightyellow;\n    }\n\n    .control-item {\n      display: flex;\n      align-items: center;\n      gap: 5px;\n    }\n\n    .theta-container {\n      margin-top: 10px;\n    }\n\n    /* Responsive styles for smaller screens */\n    @media (max-width: 600px) {\n      table {\n        display: block;\n        width: 100%;\n        overflow-x: auto;\n      }\n\n      th,\n      td {\n        font-size: 0.9rem;\n      }\n\n      .buttons {\n        flex-direction: column;\n        align-items: center;\n        gap: 10px;\n      }\n\n      .theta-container {\n        text-align: center;\n      }\n    }\n  `;\n\n  static properties = {\n    state: { type: Array },\n    intermediateStates: { type: Array },\n    processedPairs: { type: Array },\n\n    // Gate-related\n    gate: { type: String },\n    gateMatrix: { type: Array },\n\n    targetQubit: { type: Number },\n    controlQubit: { type: Number },\n    controlled: { type: Boolean },\n\n    // For dynamic stepping\n    processingPair: { type: Array },\n    dynamicSteps: { type: Array },\n    stepIndex: { type: Number },\n\n    // Parameterized gates\n    theta: { type: Number },\n\n    // Visualization mode\n    mode: { type: String },\n\n    num_qubits: { type: Number },\n\n    // Flag to indicate that processing has begun (first pair already highlighted)\n    processingStarted: { type: Boolean },\n\n    // New transformation-related properties\n    transformationActive: { type: Boolean },\n  };\n\n  constructor() {\n    super();\n    this.state = [];\n    this.intermediateStates = [];\n    this.processedPairs = [];\n    this.gate = 'X';\n    this.targetQubit = 0;\n    this.controlQubit = 1; // Changed from 0 to 1 to avoid conflict with targetQubit\n    this.controlled = false;\n    this.processingPair = [];\n    this.dynamicSteps = [];\n    this.stepIndex = 0;\n    this.theta = Math.PI / 4;\n    this.mode = 'dynamic';\n    this.num_qubits = 3;\n    this.processingStarted = false;\n    this.transformationActive = false;\n    this.initializeState();\n  }\n\n  initializeState() {\n    const size = Math.pow(2, this.num_qubits);\n    this.state = Array.from({ length: size }, (_, i) =>\n      i === 0 ? mathjs__WEBPACK_IMPORTED_MODULE_1__.complex(1, 0) : mathjs__WEBPACK_IMPORTED_MODULE_1__.complex(0, 0)\n    );\n    this.intermediateStates = [this.state.slice()];\n    this.processedPairs = [[]];\n    this.processingPair = [];\n    this.processingStarted = false;\n    this.dynamicSteps = [];\n    this.stepIndex = 0;\n    this.requestUpdate();\n  }\n\n  randomizeState() {\n    const size = this.state.length;\n    this.state = Array.from({ length: size }, () =>\n      mathjs__WEBPACK_IMPORTED_MODULE_1__.complex(Math.random() - 0.5, Math.random() - 0.5)\n    );\n    // Normalize\n    const norm = mathjs__WEBPACK_IMPORTED_MODULE_1__.sqrt(\n      this.state.reduce((acc, val) => mathjs__WEBPACK_IMPORTED_MODULE_1__.add(acc, mathjs__WEBPACK_IMPORTED_MODULE_1__.pow(mathjs__WEBPACK_IMPORTED_MODULE_1__.abs(val), 2)), 0)\n    );\n    this.state = this.state.map((amp) => mathjs__WEBPACK_IMPORTED_MODULE_1__.divide(amp, norm));\n    this.intermediateStates = [this.state.slice()];\n    this.processedPairs = [[]];\n    this.processingPair = [];\n    this.processingStarted = false;\n    this.dynamicSteps = [];\n    this.stepIndex = 0;\n    this.requestUpdate();\n  }\n\n  // Begin a new transformation: compute pairs, highlight first one, lock controls\n  startTransformation() {\n    // Validate inputs before starting\n    const isControlledGate = ['CX', 'CY', 'CZ'].includes(this.gate);\n    const requiresRadian = ['Phase', 'RX', 'RY', 'RZ'].includes(this.gate);\n    if (isControlledGate && this.controlQubit === this.targetQubit) {\n      alert(\"Control and target qubits must be different for controlled gates.\");\n      return; // Abort if invalid\n    }\n    if (requiresRadian && (this.theta === '' || this.theta === null || isNaN(this.theta))) {\n      alert(\"Please enter a valid value for θ (radians).\\nIt must be a number.\");\n      return;\n    }\n\n    // Prepare the pairs to be processed\n    this.transformationActive = true;\n    this.processingStarted = false;\n    this.applyDynamicGate(); // computes dynamicSteps & highlights first pair\n  }\n\n  // Skip processing – run through all remaining pairs automatically\n  skip() {\n    if (!this.transformationActive) return; // nothing to do\n\n    // Ensure we process from the current pointer onward\n    if (!this.processingStarted) {\n      this.processingStarted = true; // consider first pair as already highlighted, now process it\n    }\n\n    while (this.stepIndex < this.dynamicSteps.length) {\n      this.processCurrentPair();\n    }\n\n    // Finish transformation\n    this.finishTransformation();\n  }\n\n  applyDynamicGate() {\n    this.controlled = ['CX', 'CY', 'CZ'].includes(this.gate);\n    const n = this.num_qubits; // Use this.num_qubits instead of hardcoded 3\n    const generator = pair_generator(n, this.targetQubit);\n\n    this.gateMatrix =\n      typeof gates[this.gate] === 'function'\n        ? gates[this.gate](this.theta)\n        : gates[this.gate];\n\n    // Collect all the pairs we will process\n    this.dynamicSteps = [];\n    for (const [k0, k1] of generator) {\n      console.log(this.controlled, this.controlQubit, k0, k1);\n      if (this.controlled && !is_bit_set(k0, this.controlQubit)) continue;\n      this.dynamicSteps.push([k0, k1]);\n    }\n\n    // Reset any previous step info, but keep current state as the start\n    this.intermediateStates = [this.state.slice()];\n    this.processedPairs = [[]];\n    this.stepIndex = 0;\n\n    // Set the first pair to highlight (if any)\n    this.processingPair = this.dynamicSteps.length > 0 ? this.dynamicSteps[0] : [];\n    this.processingStarted = false;\n    this.requestUpdate();\n  }\n\n  processCurrentPair() {\n    // Process the pair at current stepIndex\n    if (this.stepIndex >= this.dynamicSteps.length) return;\n\n    const [k0, k1] = this.dynamicSteps[this.stepIndex];\n    process_pair(this.state, this.gateMatrix, k0, k1);\n\n    // Track state and processed pair\n    this.intermediateStates.push(this.state.slice());\n    this.processedPairs.push([k0, k1]);\n\n    this.stepIndex++;\n\n    // Update highlighted pair\n    this.processingPair =\n      this.stepIndex < this.dynamicSteps.length ? this.dynamicSteps[this.stepIndex] : [];\n  }\n\n  nextStep() {\n    if (!this.transformationActive) return;\n\n    // If processing hasn't started yet, process the first pair\n    if (!this.processingStarted) {\n      this.processingStarted = true;\n      this.processCurrentPair();\n      this.requestUpdate();\n      return;\n    }\n\n    // Process one pair\n    this.processCurrentPair();\n\n    // If done, finish transformation\n    if (this.stepIndex >= this.dynamicSteps.length) {\n      this.finishTransformation();\n    } else {\n      this.requestUpdate();\n    }\n  }\n\n  finishTransformation() {\n    this.transformationActive = false;\n    this.processingStarted = false;\n    // Keep final state & highlight cleared\n    this.processingPair = [];\n    this.requestUpdate();\n  }\n\n  renderTable(state, title, highlightIndices = []) {\n    return (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`\n      <h4>${title}</h4>\n      <table>\n        <thead>\n          <tr>\n            <th>Outcome</th>\n            <th>Binary</th>\n            <th>Amplitude</th>\n            <th>Direction</th>\n            <th>Magnitude</th>\n            <th>Amplitude Bar</th>\n          </tr>\n        </thead>\n        <tbody>\n          ${state.map((amplitude, index) => {\n            const magnitude = mathjs__WEBPACK_IMPORTED_MODULE_1__.abs(amplitude).toFixed(3);\n            const direction = ((mathjs__WEBPACK_IMPORTED_MODULE_1__.arg(amplitude) * 180) / Math.PI).toFixed(1);\n            const rgb = complex_to_rgb(amplitude, true);\n            const isHighlighted = highlightIndices.includes(index);\n            return (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`\n              <tr class=\"${isHighlighted ? 'highlight' : ''}\">\n                <td>${index}</td>\n                <td>\n                  ${index.toString(2).padStart(Math.log2(state.length), '0')}\n                </td>\n                <td>\n                  ${mathjs__WEBPACK_IMPORTED_MODULE_1__.format(amplitude, {\n                    notation: 'fixed',\n                    precision: 3,\n                  })}\n                </td>\n                <td>${direction}°</td>\n                <td>${magnitude}</td>\n                <td>\n                  <div class=\"amplitude-bar\">\n                    <div\n                      class=\"bar\"\n                      style=\"width: ${magnitude * 100}%;\n                             background-color: rgb(${rgb.join(',')});\"\n                    ></div>\n                  </div>\n                </td>\n              </tr>\n            `;\n          })}\n        </tbody>\n      </table>\n    `;\n  }\n\n  render() {\n    // Always use dynamic mode\n    const currentState = this.intermediateStates[this.stepIndex];\n    const gateRequiresTarget = ['X', 'Y', 'Z', 'H', 'CX', 'CY', 'CZ', 'RX', 'RY', 'RZ', 'Phase'].includes(this.gate);\n    const gateRequiresControl = ['CX', 'CY', 'CZ'].includes(this.gate);\n    const gateRequiresAngle = ['Phase', 'RZ', 'RX', 'RY'].includes(this.gate);\n\n    // Log the target qubit value when it changes\n    console.log('Target Qubit:', this.targetQubit);\n    console.log('Control Qubit:', this.controlQubit, 'Gate:', this.gate, 'Requires Control:', gateRequiresControl);\n\n    const controlsLocked = this.transformationActive;\n\n    const qubitOptions = Array.from({ length: this.num_qubits }, (_, i) => i);\n\n    return (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`\n      <div>\n        <!-- Removed duplicate <h3>Quantum Transformation Simulator</h3> -->\n\n        <!-- Controls at the top: first row -->\n        <div class=\"buttons\" style=\"margin-bottom: 0;\">\n          <div class=\"control-item\">\n            <label for=\"gate-select\">Gate:</label>\n            <select id=\"gate-select\" @change=\"${(e) => { \n              this.gate = e.target.value; \n              this.controlled = ['CX', 'CY', 'CZ'].includes(this.gate);\n              console.log('Gate changed to:', this.gate, 'controlled:', this.controlled);\n              // Set control qubit to 1 when switching to controlled gates\n              if (this.controlled) {\n                this.controlQubit = 1;\n                console.log('Set control qubit to:', this.controlQubit);\n              }\n              this.dynamicSteps = [];\n              this.stepIndex = 0;\n              this.processingStarted = false; \n              this.requestUpdate(); // Force update to ensure UI reflects changes\n            }}\" ?disabled=\"${controlsLocked}\">\n              <option value=\"X\" ?selected=\"${this.gate === 'X'}\">X</option>\n              <option value=\"Y\" ?selected=\"${this.gate === 'Y'}\">Y</option>\n              <option value=\"Z\" ?selected=\"${this.gate === 'Z'}\">Z</option>\n              <option value=\"H\" ?selected=\"${this.gate === 'H'}\">H</option>\n              <option value=\"CX\" ?selected=\"${this.gate === 'CX'}\">CX</option>\n              <option value=\"CY\" ?selected=\"${this.gate === 'CY'}\">CY</option>\n              <option value=\"CZ\" ?selected=\"${this.gate === 'CZ'}\">CZ</option>\n              <option value=\"Phase\" ?selected=\"${this.gate === 'Phase'}\">Phase</option>\n              <option value=\"RX\" ?selected=\"${this.gate === 'RX'}\">RX</option>\n              <option value=\"RY\" ?selected=\"${this.gate === 'RY'}\">RY</option>\n              <option value=\"RZ\" ?selected=\"${this.gate === 'RZ'}\">RZ</option>\n            </select>\n          </div>\n\n          ${gateRequiresTarget ? (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`\n            <div class=\"control-item\">\n              <label for=\"target-qubit\">Target Qubit:</label>\n              <select\n                id=\"target-qubit\"\n                .value=\"${this.targetQubit}\"\n                @change=\"${this.handleTargetQubitChange}\"\n                ?disabled=\"${controlsLocked}\"\n              >\n                ${qubitOptions\n                  .map(q => (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`<option .value=\"${q}\">${q}</option>`)}\n              </select>\n            </div>\n          ` : ''}\n\n          ${gateRequiresControl ? (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`\n            <div class=\"control-item\">\n              <label for=\"control-qubit\">Control Qubit:</label>\n              <select\n                id=\"control-qubit\"\n                .value=\"${this.controlQubit}\"\n                @change=\"${this.handleControlQubitChange}\"\n                ?disabled=\"${controlsLocked}\"\n              >\n                ${qubitOptions\n                  .map(q => (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`<option .value=\"${q}\">${q}</option>`)}\n              </select>\n            </div>\n          ` : ''}\n\n          ${gateRequiresAngle ? (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`\n            <div class=\"control-item\">\n              <label for=\"theta-input\">θ (radians):</label>\n              <input\n                id=\"theta-input\"\n                type=\"number\"\n                step=\"0.1\"\n                .value=\"${this.theta}\"\n                @input=\"${(e) => { this.theta = e.target.value === '' ? NaN : Number(e.target.value); this.dynamicSteps = []; this.stepIndex = 0; this.processingStarted = false; }}\"\n                ?disabled=\"${controlsLocked}\"\n                style=\"width: 60px;\"\n              />\n            </div>\n          ` : ''}\n        </div>\n\n        <!-- Second row: action buttons -->\n        <div style=\"height: 24px;\"></div>\n        <div class=\"buttons\" style=\"margin-top: 0; margin-bottom: 25px;\">\n          ${this.transformationActive ? (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`\n            <button\n              @click=\"${this.nextStep}\"\n              ?disabled=\"${this.dynamicSteps.length > 0 && this.stepIndex >= this.dynamicSteps.length}\"\n            >\n              Process Next (Highlighted) Pair\n            </button>\n            <button @click=\"${this.skip}\">\n              Process All (Remaining) Pairs\n            </button>\n          ` : (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`\n            <button @click=\"${this.startTransformation}\">Start Transformation</button>\n          `}\n\n          <button @click=\"${this.initializeState}\" ?disabled=\"${controlsLocked}\">Reset</button>\n          <button @click=\"${this.randomizeState}\" ?disabled=\"${controlsLocked}\">Randomize</button>\n        </div>\n\n        <!-- Render table -->\n        <div>\n          ${this.renderTable(currentState, `Current State`, this.processingPair)}\n        </div>\n      </div>\n    `;\n  }\n\n  updated() {\n    // Force the control qubit dropdown to the correct value after rendering\n    const controlSelect = this.renderRoot?.querySelector('#control-qubit');\n    if (controlSelect && String(controlSelect.value) !== String(this.controlQubit)) {\n      controlSelect.value = String(this.controlQubit);\n    }\n  }\n\n  handleTargetQubitChange(e) {\n    const newTarget = parseInt(e.target.value, 10);\n    this.targetQubit = newTarget;\n    this.requestUpdate();\n  }\n\n  handleControlQubitChange(e) {\n    const newControl = parseInt(e.target.value, 10);\n    this.controlQubit = newControl;\n    this.requestUpdate();\n  }\n}\n\ncustomElements.define('quantum-state-viewer', QuantumStateViewer);\n\n\n//# sourceURL=webpack://humejs/./src/lib/algos/component2.js?");

/***/ })

}]);