{"version":3,"file":"qviz.min.js","mappings":"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","sources":["webpack://qviz/webpack/universalModuleDefinition","webpack://qviz/./src/circuit.ts","webpack://qviz/./src/constants.ts","webpack://qviz/./src/formatters/formatUtils.ts","webpack://qviz/./src/formatters/gateFormatter.ts","webpack://qviz/./src/formatters/inputFormatter.ts","webpack://qviz/./src/formatters/registerFormatter.ts","webpack://qviz/./src/metadata.ts","webpack://qviz/./src/process.ts","webpack://qviz/./src/register.ts","webpack://qviz/./src/sqore.ts","webpack://qviz/./src/styles.ts","webpack://qviz/./src/utils.ts","webpack://qviz/webpack/bootstrap","webpack://qviz/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"qviz\"] = factory();\n\telse\n\t\troot[\"qviz\"] = factory();\n})(self, () => {\nreturn ","\"use strict\";\r\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ConditionalRender = void 0;\r\n/**\r\n * Conditions on when to render the given operation.\r\n */\r\nvar ConditionalRender;\r\n(function (ConditionalRender) {\r\n    /** Always rendered. */\r\n    ConditionalRender[ConditionalRender[\"Always\"] = 0] = \"Always\";\r\n    /** Render classically-controlled operation when measurement is a zero. */\r\n    ConditionalRender[ConditionalRender[\"OnZero\"] = 1] = \"OnZero\";\r\n    /** Render classically-controlled operation when measurement is a one. */\r\n    ConditionalRender[ConditionalRender[\"OnOne\"] = 2] = \"OnOne\";\r\n    /** Render operation as a group of its nested operations. */\r\n    ConditionalRender[ConditionalRender[\"AsGroup\"] = 3] = \"AsGroup\";\r\n})(ConditionalRender = exports.ConditionalRender || (exports.ConditionalRender = {}));\r\n","\"use strict\";\r\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.regLineStart = exports.argsFontSize = exports.labelFontSize = exports.controlBtnRadius = exports.controlBtnOffset = exports.nestedGroupPadding = exports.groupBoxPadding = exports.classicalRegHeight = exports.registerHeight = exports.labelPadding = exports.gatePadding = exports.gateHeight = exports.minGateWidth = exports.startY = exports.startX = exports.leftPadding = exports.svgNS = void 0;\r\n// SVG Namespace\r\nexports.svgNS = 'http://www.w3.org/2000/svg';\r\n// Display attributes\r\n/** Left padding of SVG. */\r\nexports.leftPadding = 20;\r\n/** x coordinate for first operation on each register. */\r\nexports.startX = 80;\r\n/** y coordinate of first register. */\r\nexports.startY = 40;\r\n/** Minimum width of each gate. */\r\nexports.minGateWidth = 40;\r\n/** Height of each gate. */\r\nexports.gateHeight = 40;\r\n/** Padding on each side of gate. */\r\nexports.gatePadding = 10;\r\n/** Padding on each side of gate label. */\r\nexports.labelPadding = 10;\r\n/** Height between each qubit register. */\r\nexports.registerHeight = exports.gateHeight + exports.gatePadding * 2;\r\n/** Height between classical registers. */\r\nexports.classicalRegHeight = exports.gateHeight;\r\n/** Group box inner padding. */\r\nexports.groupBoxPadding = exports.gatePadding;\r\n/** Padding between nested groups. */\r\nexports.nestedGroupPadding = 2;\r\n/** Additional offset for control button. */\r\nexports.controlBtnOffset = 40;\r\n/** Control button radius. */\r\nexports.controlBtnRadius = 15;\r\n/** Default font size for gate labels. */\r\nexports.labelFontSize = 14;\r\n/** Default font size for gate arguments. */\r\nexports.argsFontSize = 12;\r\n/** Starting x coord for each register wire. */\r\nexports.regLineStart = 40;\r\n","\"use strict\";\r\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.dashedBox = exports.dashedLine = exports.arc = exports.text = exports.box = exports.controlDot = exports.circle = exports.line = exports.group = exports.createSvgElement = void 0;\r\nvar constants_1 = require(\"../constants\");\r\n// Helper functions for basic SVG components\r\n/**\r\n * Create an SVG element.\r\n *\r\n * @param type The type of element to be created.\r\n * @param attributes The attributes that define the element.\r\n *\r\n * @returns SVG element.\r\n */\r\nvar createSvgElement = function (type, attributes) {\r\n    if (attributes === void 0) { attributes = {}; }\r\n    var el = document.createElementNS(constants_1.svgNS, type);\r\n    Object.entries(attributes).forEach(function (_a) {\r\n        var attrName = _a[0], attrVal = _a[1];\r\n        return el.setAttribute(attrName, attrVal);\r\n    });\r\n    return el;\r\n};\r\nexports.createSvgElement = createSvgElement;\r\n/**\r\n * Given an array of SVG elements, group them as an SVG group using the `<g>` tag.\r\n *\r\n * @param svgElems   Array of SVG elements.\r\n * @param attributes Key-value pairs of attributes and they values.\r\n *\r\n * @returns SVG element for grouped elements.\r\n */\r\nvar group = function (svgElems, attributes) {\r\n    if (attributes === void 0) { attributes = {}; }\r\n    var el = (0, exports.createSvgElement)('g', attributes);\r\n    svgElems.forEach(function (child) { return el.appendChild(child); });\r\n    return el;\r\n};\r\nexports.group = group;\r\n/**\r\n * Generate an SVG line.\r\n *\r\n * @param x1        x coord of starting point of line.\r\n * @param y1        y coord of starting point of line.\r\n * @param x2        x coord of ending point of line.\r\n * @param y2        y coord fo ending point of line.\r\n * @param className Class name of element.\r\n *\r\n * @returns SVG element for line.\r\n */\r\nvar line = function (x1, y1, x2, y2, className) {\r\n    var attrs = {\r\n        x1: x1.toString(),\r\n        x2: x2.toString(),\r\n        y1: y1.toString(),\r\n        y2: y2.toString(),\r\n    };\r\n    if (className != null)\r\n        attrs['class'] = className;\r\n    return (0, exports.createSvgElement)('line', attrs);\r\n};\r\nexports.line = line;\r\n/**\r\n * Generate an SVG circle.\r\n *\r\n * @param x      x coord of circle.\r\n * @param y      y coord of circle.\r\n * @param radius Radius of circle.\r\n *\r\n * @returns SVG element for circle.\r\n */\r\nvar circle = function (x, y, radius, className) {\r\n    var attrs = {\r\n        cx: x.toString(),\r\n        cy: y.toString(),\r\n        r: radius.toString(),\r\n    };\r\n    if (className != null)\r\n        attrs['class'] = className;\r\n    return (0, exports.createSvgElement)('circle', attrs);\r\n};\r\nexports.circle = circle;\r\n/**\r\n * Generate the SVG representation of a control dot used for controlled operations.\r\n *\r\n * @param x      x coord of circle.\r\n * @param y      y coord of circle.\r\n * @param radius Radius of circle.\r\n *\r\n * @returns SVG element for control dot.\r\n */\r\nvar controlDot = function (x, y, radius) {\r\n    if (radius === void 0) { radius = 5; }\r\n    return (0, exports.circle)(x, y, radius, 'control-dot');\r\n};\r\nexports.controlDot = controlDot;\r\n/**\r\n * Generate the SVG representation of a unitary box that represents an arbitrary unitary operation.\r\n *\r\n * @param x         x coord of box.\r\n * @param y         y coord of box.\r\n * @param width     Width of box.\r\n * @param height    Height of box.\r\n * @param className Class name of element.\r\n *\r\n * @returns SVG element for unitary box.\r\n */\r\nvar box = function (x, y, width, height, className) {\r\n    if (className === void 0) { className = 'gate-unitary'; }\r\n    return (0, exports.createSvgElement)('rect', {\r\n        class: className,\r\n        x: x.toString(),\r\n        y: y.toString(),\r\n        width: width.toString(),\r\n        height: height.toString(),\r\n    });\r\n};\r\nexports.box = box;\r\n/**\r\n * Generate the SVG text element from a given text string.\r\n *\r\n * @param text String to render as SVG text.\r\n * @param x    Middle x coord of text.\r\n * @param y    Middle y coord of text.\r\n * @param fs   Font size of text.\r\n *\r\n * @returns SVG element for text.\r\n */\r\nvar text = function (text, x, y, fs) {\r\n    if (fs === void 0) { fs = constants_1.labelFontSize; }\r\n    var el = (0, exports.createSvgElement)('text', {\r\n        'font-size': fs.toString(),\r\n        x: x.toString(),\r\n        y: y.toString(),\r\n    });\r\n    el.textContent = text;\r\n    return el;\r\n};\r\nexports.text = text;\r\n/**\r\n * Generate the SVG representation of the arc used in the measurement box.\r\n *\r\n * @param x  x coord of arc.\r\n * @param y  y coord of arc.\r\n * @param rx x radius of arc.\r\n * @param ry y radius of arc.\r\n *\r\n * @returns SVG element for arc.\r\n */\r\nvar arc = function (x, y, rx, ry) {\r\n    return (0, exports.createSvgElement)('path', {\r\n        class: 'arc-measure',\r\n        d: \"M \".concat(x + 2 * rx, \" \").concat(y, \" A \").concat(rx, \" \").concat(ry, \" 0 0 0 \").concat(x, \" \").concat(y),\r\n    });\r\n};\r\nexports.arc = arc;\r\n/**\r\n * Generate a dashed SVG line.\r\n *\r\n * @param x1        x coord of starting point of line.\r\n * @param y1        y coord of starting point of line.\r\n * @param x2        x coord of ending point of line.\r\n * @param y2        y coord fo ending point of line.\r\n * @param className Class name of element.\r\n *\r\n * @returns SVG element for dashed line.\r\n */\r\nvar dashedLine = function (x1, y1, x2, y2, className) {\r\n    var el = (0, exports.line)(x1, y1, x2, y2, className);\r\n    el.setAttribute('stroke-dasharray', '8, 8');\r\n    return el;\r\n};\r\nexports.dashedLine = dashedLine;\r\n/**\r\n * Generate the SVG representation of the dashed box used for enclosing groups of operations controlled on a classical register.\r\n *\r\n * @param x         x coord of box.\r\n * @param y         y coord of box.\r\n * @param width     Width of box.\r\n * @param height    Height of box.\r\n * @param className Class name of element.\r\n *\r\n * @returns SVG element for dashed box.\r\n */\r\nvar dashedBox = function (x, y, width, height, className) {\r\n    var el = (0, exports.box)(x, y, width, height, className);\r\n    el.setAttribute('fill-opacity', '0');\r\n    el.setAttribute('stroke-dasharray', '8, 8');\r\n    return el;\r\n};\r\nexports.dashedBox = dashedBox;\r\n","\"use strict\";\r\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports._classicalControlled = exports._groupedOperations = exports._controlledGate = exports._swap = exports._unitary = exports._measure = exports._zoomButton = exports._createGate = exports._formatGate = exports.formatGates = void 0;\r\nvar metadata_1 = require(\"../metadata\");\r\nvar constants_1 = require(\"../constants\");\r\nvar formatUtils_1 = require(\"./formatUtils\");\r\n/**\r\n * Given an array of operations (in metadata format), return the SVG representation.\r\n *\r\n * @param opsMetadata Array of Metadata representation of operations.\r\n * @param nestedDepth Depth of nested operations (used in classically controlled and grouped operations).\r\n *\r\n * @returns SVG representation of operations.\r\n */\r\nvar formatGates = function (opsMetadata, nestedDepth) {\r\n    if (nestedDepth === void 0) { nestedDepth = 0; }\r\n    var formattedGates = opsMetadata.map(function (metadata) { return _formatGate(metadata, nestedDepth); });\r\n    return (0, formatUtils_1.group)(formattedGates);\r\n};\r\nexports.formatGates = formatGates;\r\n/**\r\n * Takes in an operation's metadata and formats it into SVG.\r\n *\r\n * @param metadata Metadata object representation of gate.\r\n * @param nestedDepth Depth of nested operations (used in classically controlled and grouped operations).\r\n *\r\n * @returns SVG representation of gate.\r\n */\r\nvar _formatGate = function (metadata, nestedDepth) {\r\n    if (nestedDepth === void 0) { nestedDepth = 0; }\r\n    var type = metadata.type, x = metadata.x, controlsY = metadata.controlsY, targetsY = metadata.targetsY, label = metadata.label, displayArgs = metadata.displayArgs, width = metadata.width;\r\n    switch (type) {\r\n        case metadata_1.GateType.Measure:\r\n            return _createGate([_measure(x, controlsY[0])], metadata, nestedDepth);\r\n        case metadata_1.GateType.Unitary:\r\n            return _createGate([_unitary(label, x, targetsY, width, displayArgs)], metadata, nestedDepth);\r\n        case metadata_1.GateType.X:\r\n            return _createGate([_x(metadata, nestedDepth)], metadata, nestedDepth);\r\n        case metadata_1.GateType.Swap:\r\n            return controlsY.length > 0\r\n                ? _controlledGate(metadata, nestedDepth)\r\n                : _createGate([_swap(metadata, nestedDepth)], metadata, nestedDepth);\r\n        case metadata_1.GateType.Cnot:\r\n        case metadata_1.GateType.ControlledUnitary:\r\n            return _controlledGate(metadata, nestedDepth);\r\n        case metadata_1.GateType.Group:\r\n            return _groupedOperations(metadata, nestedDepth);\r\n        case metadata_1.GateType.ClassicalControlled:\r\n            return _classicalControlled(metadata);\r\n        default:\r\n            throw new Error(\"ERROR: unknown gate (\".concat(label, \") of type \").concat(type, \".\"));\r\n    }\r\n};\r\nexports._formatGate = _formatGate;\r\n/**\r\n * Groups SVG elements into a gate SVG group.\r\n *\r\n * @param svgElems       Array of SVG elements.\r\n * @param dataAttributes Custom data attributes to be attached to SVG group.\r\n *\r\n * @returns SVG representation of a gate.\r\n */\r\nvar _createGate = function (svgElems, metadata, nestedDepth) {\r\n    var dataAttributes = (metadata || {}).dataAttributes;\r\n    var attributes = { class: 'gate' };\r\n    Object.entries(dataAttributes || {}).forEach(function (_a) {\r\n        var attr = _a[0], val = _a[1];\r\n        return (attributes[\"data-\".concat(attr)] = val);\r\n    });\r\n    var zoomBtn = _zoomButton(metadata, nestedDepth);\r\n    if (zoomBtn != null)\r\n        svgElems = svgElems.concat([zoomBtn]);\r\n    return (0, formatUtils_1.group)(svgElems, attributes);\r\n};\r\nexports._createGate = _createGate;\r\n/**\r\n * Returns the expand/collapse button for an operation if it can be zoomed-in or zoomed-out,\r\n * respectively. If neither are allowed, return `null`.\r\n *\r\n * @param metadata Operation metadata.\r\n * @param nestedDepth Depth of nested operation.\r\n *\r\n * @returns SVG element for expand/collapse button if needed, or null otherwise.\r\n */\r\nvar _zoomButton = function (metadata, nestedDepth) {\r\n    if (metadata == undefined)\r\n        return null;\r\n    var _a = _gatePosition(metadata, nestedDepth), x1 = _a[0], y1 = _a[1];\r\n    var dataAttributes = metadata.dataAttributes;\r\n    dataAttributes = dataAttributes || {};\r\n    var expanded = 'expanded' in dataAttributes;\r\n    var x = x1 + 2;\r\n    var y = y1 + 2;\r\n    var circleBorder = (0, formatUtils_1.circle)(x, y, 10);\r\n    if (expanded) {\r\n        // Create collapse button if expanded\r\n        var minusSign = (0, formatUtils_1.createSvgElement)('path', { d: \"M\".concat(x - 7, \",\").concat(y, \" h14\") });\r\n        var elements = [circleBorder, minusSign];\r\n        return (0, formatUtils_1.group)(elements, { class: 'gate-control gate-collapse' });\r\n    }\r\n    else if (dataAttributes['zoom-in'] == 'true') {\r\n        // Create expand button if operation can be zoomed in\r\n        var plusSign = (0, formatUtils_1.createSvgElement)('path', { d: \"M\".concat(x, \",\").concat(y - 7, \" v14 M\").concat(x - 7, \",\").concat(y, \" h14\") });\r\n        var elements = [circleBorder, plusSign];\r\n        return (0, formatUtils_1.group)(elements, { class: 'gate-control gate-expand' });\r\n    }\r\n    return null;\r\n};\r\nexports._zoomButton = _zoomButton;\r\n/**\r\n * Calculate position of gate.\r\n *\r\n * @param metadata Operation metadata.\r\n * @param nestedDepth Depth of nested operations.\r\n *\r\n * @returns Coordinates of gate: [x1, y1, x2, y2].\r\n */\r\nvar _gatePosition = function (metadata, nestedDepth) {\r\n    var x = metadata.x, width = metadata.width, type = metadata.type, targetsY = metadata.targetsY;\r\n    var ys = (targetsY === null || targetsY === void 0 ? void 0 : targetsY.flatMap(function (y) { return y; })) || [];\r\n    var maxY = Math.max.apply(Math, ys);\r\n    var minY = Math.min.apply(Math, ys);\r\n    var x1, y1, x2, y2;\r\n    switch (type) {\r\n        case metadata_1.GateType.Group:\r\n            var padding = constants_1.groupBoxPadding - nestedDepth * constants_1.nestedGroupPadding;\r\n            x1 = x - 2 * padding;\r\n            y1 = minY - constants_1.gateHeight / 2 - padding;\r\n            x2 = width + 2 * padding;\r\n            y2 = maxY + +constants_1.gateHeight / 2 + padding - (minY - constants_1.gateHeight / 2 - padding);\r\n            return [x1, y1, x2, y2];\r\n        default:\r\n            x1 = x - width / 2;\r\n            y1 = minY - constants_1.gateHeight / 2;\r\n            x2 = x + width;\r\n            y2 = maxY + constants_1.gateHeight / 2;\r\n    }\r\n    return [x1, y1, x2, y2];\r\n};\r\n/**\r\n * Creates a measurement gate at position (x, y).\r\n *\r\n * @param x  x coord of measurement gate.\r\n * @param y  y coord of measurement gate.\r\n *\r\n * @returns SVG representation of measurement gate.\r\n */\r\nvar _measure = function (x, y) {\r\n    x -= constants_1.minGateWidth / 2;\r\n    var width = constants_1.minGateWidth, height = constants_1.gateHeight;\r\n    // Draw measurement box\r\n    var mBox = (0, formatUtils_1.box)(x, y - height / 2, width, height, 'gate-measure');\r\n    var mArc = (0, formatUtils_1.arc)(x + 5, y + 2, width / 2 - 5, height / 2 - 8);\r\n    var meter = (0, formatUtils_1.line)(x + width / 2, y + 8, x + width - 8, y - height / 2 + 8);\r\n    return (0, formatUtils_1.group)([mBox, mArc, meter]);\r\n};\r\nexports._measure = _measure;\r\n/**\r\n * Creates the SVG for a unitary gate on an arbitrary number of qubits.\r\n *\r\n * @param label            Gate label.\r\n * @param x                x coord of gate.\r\n * @param y                Array of y coords of registers acted upon by gate.\r\n * @param width            Width of gate.\r\n * @param displayArgs           Arguments passed in to gate.\r\n * @param renderDashedLine If true, draw dashed lines between non-adjacent unitaries.\r\n *\r\n * @returns SVG representation of unitary gate.\r\n */\r\nvar _unitary = function (label, x, y, width, displayArgs, renderDashedLine) {\r\n    if (renderDashedLine === void 0) { renderDashedLine = true; }\r\n    if (y.length === 0)\r\n        throw new Error(\"Failed to render unitary gate (\".concat(label, \"): has no y-values\"));\r\n    // Render each group as a separate unitary boxes\r\n    var unitaryBoxes = y.map(function (group) {\r\n        var maxY = group[group.length - 1], minY = group[0];\r\n        var height = maxY - minY + constants_1.gateHeight;\r\n        return _unitaryBox(label, x, minY, width, height, displayArgs);\r\n    });\r\n    // Draw dashed line between disconnected unitaries\r\n    if (renderDashedLine && unitaryBoxes.length > 1) {\r\n        var lastBox = y[y.length - 1];\r\n        var firstBox = y[0];\r\n        var maxY = lastBox[lastBox.length - 1], minY = firstBox[0];\r\n        var vertLine = (0, formatUtils_1.dashedLine)(x, minY, x, maxY);\r\n        return (0, formatUtils_1.group)(__spreadArray([vertLine], unitaryBoxes, true));\r\n    }\r\n    return (0, formatUtils_1.group)(unitaryBoxes);\r\n};\r\nexports._unitary = _unitary;\r\n/**\r\n * Generates SVG representation of the boxed unitary gate symbol.\r\n *\r\n * @param label  Label for unitary operation.\r\n * @param x      x coord of gate.\r\n * @param y      y coord of gate.\r\n * @param width  Width of gate.\r\n * @param height Height of gate.\r\n * @param displayArgs Arguments passed in to gate.\r\n *\r\n * @returns SVG representation of unitary box.\r\n */\r\nvar _unitaryBox = function (label, x, y, width, height, displayArgs) {\r\n    if (height === void 0) { height = constants_1.gateHeight; }\r\n    y -= constants_1.gateHeight / 2;\r\n    var uBox = (0, formatUtils_1.box)(x - width / 2, y, width, height);\r\n    var labelY = y + height / 2 - (displayArgs == null ? 0 : 7);\r\n    var labelText = (0, formatUtils_1.text)(label, x, labelY);\r\n    var elems = [uBox, labelText];\r\n    if (displayArgs != null) {\r\n        var argStrY = y + height / 2 + 8;\r\n        var argText = (0, formatUtils_1.text)(displayArgs, x, argStrY, constants_1.argsFontSize);\r\n        elems.push(argText);\r\n    }\r\n    return (0, formatUtils_1.group)(elems);\r\n};\r\n/**\r\n * Creates the SVG for a SWAP gate on y coords given by targetsY.\r\n *\r\n * @param x          Centre x coord of SWAP gate.\r\n * @param targetsY   y coords of target registers.\r\n *\r\n * @returns SVG representation of SWAP gate.\r\n */\r\nvar _swap = function (metadata, nestedDepth) {\r\n    var x = metadata.x, targetsY = metadata.targetsY;\r\n    // Get SVGs of crosses\r\n    var _a = _gatePosition(metadata, nestedDepth), x1 = _a[0], y1 = _a[1], x2 = _a[2], y2 = _a[3];\r\n    var ys = (targetsY === null || targetsY === void 0 ? void 0 : targetsY.flatMap(function (y) { return y; })) || [];\r\n    var bg = (0, formatUtils_1.box)(x1, y1, x2, y2, 'gate-swap');\r\n    var crosses = ys.map(function (y) { return _cross(x, y); });\r\n    var vertLine = (0, formatUtils_1.line)(x, ys[0], x, ys[1]);\r\n    return (0, formatUtils_1.group)(__spreadArray(__spreadArray([bg], crosses, true), [vertLine], false));\r\n};\r\nexports._swap = _swap;\r\n/**\r\n * Creates the SVG for an X gate\r\n *\r\n * @returns SVG representation of X gate.\r\n */\r\nvar _x = function (metadata, _) {\r\n    var x = metadata.x, targetsY = metadata.targetsY;\r\n    var ys = targetsY.flatMap(function (y) { return y; });\r\n    return _oplus(x, ys[0]);\r\n};\r\n/**\r\n * Generates cross for display in SWAP gate.\r\n *\r\n * @param x x coord of gate.\r\n * @param y y coord of gate.\r\n *\r\n * @returns SVG representation for cross.\r\n */\r\nvar _cross = function (x, y) {\r\n    var radius = 8;\r\n    var line1 = (0, formatUtils_1.line)(x - radius, y - radius, x + radius, y + radius);\r\n    var line2 = (0, formatUtils_1.line)(x - radius, y + radius, x + radius, y - radius);\r\n    return (0, formatUtils_1.group)([line1, line2]);\r\n};\r\n/**\r\n * Produces the SVG representation of a controlled gate on multiple qubits.\r\n *\r\n * @param metadata Metadata of controlled gate.\r\n *\r\n * @returns SVG representation of controlled gate.\r\n */\r\nvar _controlledGate = function (metadata, nestedDepth) {\r\n    var targetGateSvgs = [];\r\n    var type = metadata.type, x = metadata.x, controlsY = metadata.controlsY, label = metadata.label, displayArgs = metadata.displayArgs, width = metadata.width;\r\n    var targetsY = metadata.targetsY;\r\n    // Get SVG for target gates\r\n    switch (type) {\r\n        case metadata_1.GateType.Cnot:\r\n            targetsY.forEach(function (y) { return targetGateSvgs.push(_oplus(x, y)); });\r\n            break;\r\n        case metadata_1.GateType.Swap:\r\n            targetsY.forEach(function (y) { return targetGateSvgs.push(_cross(x, y)); });\r\n            break;\r\n        case metadata_1.GateType.ControlledUnitary:\r\n            var groupedTargetsY = targetsY;\r\n            targetGateSvgs.push(_unitary(label, x, groupedTargetsY, width, displayArgs, false));\r\n            targetsY = targetsY.flat();\r\n            break;\r\n        default:\r\n            throw new Error(\"ERROR: Unrecognized gate: \".concat(label, \" of type \").concat(type));\r\n    }\r\n    // Get SVGs for control dots\r\n    var controlledDotsSvg = controlsY.map(function (y) { return (0, formatUtils_1.controlDot)(x, y); });\r\n    // Create control lines\r\n    var maxY = Math.max.apply(Math, __spreadArray(__spreadArray([], controlsY, false), targetsY, false));\r\n    var minY = Math.min.apply(Math, __spreadArray(__spreadArray([], controlsY, false), targetsY, false));\r\n    var vertLine = (0, formatUtils_1.line)(x, minY, x, maxY);\r\n    var svg = _createGate(__spreadArray(__spreadArray([vertLine], controlledDotsSvg, true), targetGateSvgs, true), metadata, nestedDepth);\r\n    return svg;\r\n};\r\nexports._controlledGate = _controlledGate;\r\n/**\r\n * Generates $\\oplus$ symbol for display in CNOT gate.\r\n *\r\n * @param x x coordinate of gate.\r\n * @param y y coordinate of gate.\r\n * @param r radius of circle.\r\n *\r\n * @returns SVG representation of $\\oplus$ symbol.\r\n */\r\nvar _oplus = function (x, y, r) {\r\n    if (r === void 0) { r = 15; }\r\n    var circleBorder = (0, formatUtils_1.circle)(x, y, r);\r\n    var vertLine = (0, formatUtils_1.line)(x, y - r, x, y + r);\r\n    var horLine = (0, formatUtils_1.line)(x - r, y, x + r, y);\r\n    return (0, formatUtils_1.group)([circleBorder, vertLine, horLine], { class: 'oplus' });\r\n};\r\n/**\r\n * Generates the SVG for a group of nested operations.\r\n *\r\n * @param metadata Metadata representation of gate.\r\n * @param nestedDepth Depth of nested operations (used in classically controlled and grouped operations).\r\n *\r\n * @returns SVG representation of gate.\r\n */\r\nvar _groupedOperations = function (metadata, nestedDepth) {\r\n    var children = metadata.children;\r\n    var _a = _gatePosition(metadata, nestedDepth), x1 = _a[0], y1 = _a[1], x2 = _a[2], y2 = _a[3];\r\n    // Draw dashed box around children gates\r\n    var box = (0, formatUtils_1.dashedBox)(x1, y1, x2, y2);\r\n    var elems = [box];\r\n    if (children != null)\r\n        elems.push(formatGates(children, nestedDepth + 1));\r\n    return _createGate(elems, metadata, nestedDepth);\r\n};\r\nexports._groupedOperations = _groupedOperations;\r\n/**\r\n * Generates the SVG for a classically controlled group of operations.\r\n *\r\n * @param metadata Metadata representation of gate.\r\n * @param padding  Padding within dashed box.\r\n *\r\n * @returns SVG representation of gate.\r\n */\r\nvar _classicalControlled = function (metadata, padding) {\r\n    if (padding === void 0) { padding = constants_1.groupBoxPadding; }\r\n    var controlsY = metadata.controlsY, dataAttributes = metadata.dataAttributes;\r\n    var targetsY = metadata.targetsY;\r\n    var children = metadata.children;\r\n    var x = metadata.x, width = metadata.width;\r\n    var controlY = controlsY[0];\r\n    var elems = [];\r\n    if (children != null) {\r\n        if (children.length !== 2)\r\n            throw new Error(\"Invalid number of children found for classically-controlled gate: \".concat(children.length));\r\n        // Get SVG for gates controlled on 0\r\n        var childrenZero = formatGates(children[0]);\r\n        childrenZero.setAttribute('class', 'gates-zero');\r\n        elems.push(childrenZero);\r\n        // Get SVG for gates controlled on 1\r\n        var childrenOne = formatGates(children[1]);\r\n        childrenOne.setAttribute('class', 'gates-one');\r\n        elems.push(childrenOne);\r\n    }\r\n    // Draw control button and attached dashed line to dashed box\r\n    var controlCircleX = x + constants_1.controlBtnRadius;\r\n    var controlCircle = _controlCircle(controlCircleX, controlY);\r\n    var lineY1 = controlY + constants_1.controlBtnRadius, lineY2 = controlY + constants_1.classicalRegHeight / 2;\r\n    var vertLine = (0, formatUtils_1.dashedLine)(controlCircleX, lineY1, controlCircleX, lineY2, 'classical-line');\r\n    x += constants_1.controlBtnOffset;\r\n    var horLine = (0, formatUtils_1.dashedLine)(controlCircleX, lineY2, x, lineY2, 'classical-line');\r\n    width = width - constants_1.controlBtnOffset + (padding - constants_1.groupBoxPadding) * 2;\r\n    x += constants_1.groupBoxPadding - padding;\r\n    var y = targetsY[0] - constants_1.gateHeight / 2 - padding;\r\n    var height = targetsY[1] - targetsY[0] + constants_1.gateHeight + padding * 2;\r\n    // Draw dashed box around children gates\r\n    var box = (0, formatUtils_1.dashedBox)(x, y, width, height, 'classical-container');\r\n    elems.push.apply(elems, [horLine, vertLine, controlCircle, box]);\r\n    // Display controlled operation in initial \"unknown\" state\r\n    var attributes = {\r\n        class: \"classically-controlled-group classically-controlled-unknown\",\r\n    };\r\n    if (dataAttributes != null)\r\n        Object.entries(dataAttributes).forEach(function (_a) {\r\n            var attr = _a[0], val = _a[1];\r\n            return (attributes[\"data-\".concat(attr)] = val);\r\n        });\r\n    return (0, formatUtils_1.group)(elems, attributes);\r\n};\r\nexports._classicalControlled = _classicalControlled;\r\n/**\r\n * Generates the SVG representation of the control circle on a classical register with interactivity support\r\n * for toggling between bit values (unknown, 1, and 0).\r\n *\r\n * @param x   x coord.\r\n * @param y   y coord.\r\n * @param r   Radius of circle.\r\n *\r\n * @returns SVG representation of control circle.\r\n */\r\nvar _controlCircle = function (x, y, r) {\r\n    if (r === void 0) { r = constants_1.controlBtnRadius; }\r\n    return (0, formatUtils_1.group)([(0, formatUtils_1.circle)(x, y, r), (0, formatUtils_1.text)('?', x, y, constants_1.labelFontSize)], { class: 'classically-controlled-btn' });\r\n};\r\n","\"use strict\";\r\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports._qubitInput = exports.formatInputs = void 0;\r\nvar register_1 = require(\"../register\");\r\nvar constants_1 = require(\"../constants\");\r\nvar formatUtils_1 = require(\"./formatUtils\");\r\n/**\r\n * `formatInputs` takes in an array of Qubits and outputs the SVG string of formatted\r\n * qubit wires and a mapping from register IDs to register metadata (for rendering).\r\n *\r\n * @param qubits List of declared qubits.\r\n *\r\n * @returns returns the SVG string of formatted qubit wires, a mapping from registers\r\n *          to y coord and total SVG height.\r\n */\r\nvar formatInputs = function (qubits) {\r\n    var qubitWires = [];\r\n    var registers = {};\r\n    var currY = constants_1.startY;\r\n    qubits.forEach(function (_a) {\r\n        var id = _a.id, numChildren = _a.numChildren;\r\n        // Add qubit wire to list of qubit wires\r\n        qubitWires.push(_qubitInput(currY));\r\n        // Create qubit register\r\n        registers[id] = { type: register_1.RegisterType.Qubit, y: currY };\r\n        // If there are no attached classical registers, increment y by fixed register height\r\n        if (numChildren == null || numChildren === 0) {\r\n            currY += constants_1.registerHeight;\r\n            return;\r\n        }\r\n        // Increment current height by classical register height for attached classical registers\r\n        currY += constants_1.classicalRegHeight;\r\n        // Add classical wires\r\n        registers[id].children = Array.from(Array(numChildren), function () {\r\n            var clsReg = { type: register_1.RegisterType.Classical, y: currY };\r\n            currY += constants_1.classicalRegHeight;\r\n            return clsReg;\r\n        });\r\n    });\r\n    return {\r\n        qubitWires: (0, formatUtils_1.group)(qubitWires),\r\n        registers: registers,\r\n        svgHeight: currY,\r\n    };\r\n};\r\nexports.formatInputs = formatInputs;\r\n/**\r\n * Generate the SVG text component for the input qubit register.\r\n *\r\n * @param y y coord of input wire to render in SVG.\r\n *\r\n * @returns SVG text component for the input register.\r\n */\r\nvar _qubitInput = function (y) {\r\n    var el = (0, formatUtils_1.text)('|0⟩', constants_1.leftPadding, y, 16);\r\n    el.setAttribute('text-anchor', 'start');\r\n    el.setAttribute('dominant-baseline', 'middle');\r\n    return el;\r\n};\r\nexports._qubitInput = _qubitInput;\r\n","\"use strict\";\r\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports._qubitRegister = exports._classicalRegister = exports.formatRegisters = void 0;\r\nvar constants_1 = require(\"../constants\");\r\nvar metadata_1 = require(\"../metadata\");\r\nvar formatUtils_1 = require(\"./formatUtils\");\r\n/**\r\n * Generate the SVG representation of the qubit register wires in `registers` and the classical wires\r\n * stemming from each measurement gate.\r\n *\r\n * @param registers    Map from register IDs to register metadata.\r\n * @param measureGates Array of measurement gates metadata.\r\n * @param endX         End x coord.\r\n *\r\n * @returns SVG representation of register wires.\r\n */\r\nvar formatRegisters = function (registers, measureGates, endX) {\r\n    var formattedRegs = [];\r\n    // Render qubit wires\r\n    for (var qId in registers) {\r\n        formattedRegs.push(_qubitRegister(Number(qId), endX, registers[qId].y));\r\n    }\r\n    // Render classical wires\r\n    measureGates.forEach(function (_a) {\r\n        var type = _a.type, x = _a.x, targetsY = _a.targetsY, controlsY = _a.controlsY;\r\n        if (type !== metadata_1.GateType.Measure)\r\n            return;\r\n        var gateY = controlsY[0];\r\n        targetsY.forEach(function (y) {\r\n            formattedRegs.push(_classicalRegister(x, gateY, endX, y));\r\n        });\r\n    });\r\n    return (0, formatUtils_1.group)(formattedRegs);\r\n};\r\nexports.formatRegisters = formatRegisters;\r\n/**\r\n * Generates the SVG representation of a classical register.\r\n *\r\n * @param startX Start x coord.\r\n * @param gateY  y coord of measurement gate.\r\n * @param endX   End x coord.\r\n * @param wireY  y coord of wire.\r\n *\r\n * @returns SVG representation of the given classical register.\r\n */\r\nvar _classicalRegister = function (startX, gateY, endX, wireY) {\r\n    var wirePadding = 1;\r\n    // Draw vertical lines\r\n    var vLine1 = (0, formatUtils_1.line)(startX + wirePadding, gateY, startX + wirePadding, wireY - wirePadding, 'register-classical');\r\n    var vLine2 = (0, formatUtils_1.line)(startX - wirePadding, gateY, startX - wirePadding, wireY + wirePadding, 'register-classical');\r\n    // Draw horizontal lines\r\n    var hLine1 = (0, formatUtils_1.line)(startX + wirePadding, wireY - wirePadding, endX, wireY - wirePadding, 'register-classical');\r\n    var hLine2 = (0, formatUtils_1.line)(startX - wirePadding, wireY + wirePadding, endX, wireY + wirePadding, 'register-classical');\r\n    return (0, formatUtils_1.group)([vLine1, vLine2, hLine1, hLine2]);\r\n};\r\nexports._classicalRegister = _classicalRegister;\r\n/**\r\n * Generates the SVG representation of a qubit register.\r\n *\r\n * @param qId         Qubit register index.\r\n * @param endX        End x coord.\r\n * @param y           y coord of wire.\r\n * @param labelOffset y offset for wire label.\r\n *\r\n * @returns SVG representation of the given qubit register.\r\n */\r\nvar _qubitRegister = function (qId, endX, y, labelOffset) {\r\n    if (labelOffset === void 0) { labelOffset = 16; }\r\n    var wire = (0, formatUtils_1.line)(constants_1.regLineStart, y, endX, y);\r\n    var label = (0, formatUtils_1.text)(\"q\".concat(qId), constants_1.regLineStart, y - labelOffset);\r\n    label.setAttribute('dominant-baseline', 'hanging');\r\n    label.setAttribute('text-anchor', 'start');\r\n    label.setAttribute('font-size', '75%');\r\n    return (0, formatUtils_1.group)([wire, label]);\r\n};\r\nexports._qubitRegister = _qubitRegister;\r\n","\"use strict\";\r\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GateType = void 0;\r\n/**\r\n * Enum for the various gate operations handled.\r\n */\r\nvar GateType;\r\n(function (GateType) {\r\n    /** Measurement gate. */\r\n    GateType[GateType[\"Measure\"] = 0] = \"Measure\";\r\n    /** CNOT gate. */\r\n    GateType[GateType[\"Cnot\"] = 1] = \"Cnot\";\r\n    /** SWAP gate. */\r\n    GateType[GateType[\"Swap\"] = 2] = \"Swap\";\r\n    /** X gate. */\r\n    GateType[GateType[\"X\"] = 3] = \"X\";\r\n    /** Single/multi qubit unitary gate. */\r\n    GateType[GateType[\"Unitary\"] = 4] = \"Unitary\";\r\n    /** Single/multi controlled unitary gate. */\r\n    GateType[GateType[\"ControlledUnitary\"] = 5] = \"ControlledUnitary\";\r\n    /** Nested group of classically-controlled gates. */\r\n    GateType[GateType[\"ClassicalControlled\"] = 6] = \"ClassicalControlled\";\r\n    /** Group of nested gates */\r\n    GateType[GateType[\"Group\"] = 7] = \"Group\";\r\n    /** Invalid gate. */\r\n    GateType[GateType[\"Invalid\"] = 8] = \"Invalid\";\r\n})(GateType = exports.GateType || (exports.GateType = {}));\r\n","\"use strict\";\r\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports._offsetChildrenX = exports._fillMetadataX = exports._splitTargetsY = exports._getRegY = exports._opToMetadata = exports._getClassicalRegStart = exports._alignOps = exports._groupOperations = exports.processOperations = void 0;\r\nvar constants_1 = require(\"./constants\");\r\nvar circuit_1 = require(\"./circuit\");\r\nvar metadata_1 = require(\"./metadata\");\r\nvar register_1 = require(\"./register\");\r\nvar utils_1 = require(\"./utils\");\r\n/**\r\n * Takes in a list of operations and maps them to `metadata` objects which\r\n * contains information for formatting the corresponding SVG.\r\n *\r\n * @param operations Array of operations.\r\n * @param registers  Mapping from qubit IDs to register metadata.\r\n *\r\n * @returns An object containing `metadataList` (Array of Metadata objects) and\r\n *          `svgWidth` which is the width of the entire SVG.\r\n */\r\nvar processOperations = function (operations, registers) {\r\n    if (operations.length === 0)\r\n        return { metadataList: [], svgWidth: constants_1.startX };\r\n    // Group operations based on registers\r\n    var groupedOps = _groupOperations(operations, registers);\r\n    // Align operations on multiple registers\r\n    var alignedOps = _alignOps(groupedOps);\r\n    // Maintain widths of each column to account for variable-sized gates\r\n    var numColumns = Math.max.apply(Math, __spreadArray([0], alignedOps.map(function (ops) { return ops.length; }), false));\r\n    var columnsWidths = new Array(numColumns).fill(constants_1.minGateWidth);\r\n    // Get classical registers and their starting column index\r\n    var classicalRegs = _getClassicalRegStart(operations, alignedOps);\r\n    // Keep track of which ops are already seen to avoid duplicate rendering\r\n    var visited = {};\r\n    // Map operation index to gate metadata for formatting later\r\n    var opsMetadata = alignedOps.map(function (regOps) {\r\n        return regOps.map(function (opIdx, col) {\r\n            var op = null;\r\n            if (opIdx != null && !visited.hasOwnProperty(opIdx)) {\r\n                op = operations[opIdx];\r\n                visited[opIdx] = true;\r\n            }\r\n            var metadata = _opToMetadata(op, registers);\r\n            if (op != null && [metadata_1.GateType.Unitary, metadata_1.GateType.ControlledUnitary].includes(metadata.type)) {\r\n                // If gate is a unitary type, split targetsY into groups if there\r\n                // is a classical register between them for rendering\r\n                // Get y coordinates of classical registers in the same column as this operation\r\n                var classicalRegY = classicalRegs\r\n                    .filter(function (_a) {\r\n                    var regCol = _a[0], _ = _a[1];\r\n                    return regCol <= col;\r\n                })\r\n                    .map(function (_a) {\r\n                    var _ = _a[0], reg = _a[1];\r\n                    if (reg.cId == null)\r\n                        throw new Error('Could not find cId for classical register.');\r\n                    var children = registers[reg.qId].children;\r\n                    if (children == null)\r\n                        throw new Error(\"Failed to find classical registers for qubit ID \".concat(reg.qId, \".\"));\r\n                    return children[reg.cId].y;\r\n                });\r\n                metadata.targetsY = _splitTargetsY(op.targets, classicalRegY, registers);\r\n            }\r\n            // Expand column size, if needed\r\n            if (metadata.width > columnsWidths[col]) {\r\n                columnsWidths[col] = metadata.width;\r\n            }\r\n            return metadata;\r\n        });\r\n    });\r\n    // Fill in x coord of each gate\r\n    var endX = _fillMetadataX(opsMetadata, columnsWidths);\r\n    // Flatten operations and filter out invalid gates\r\n    var metadataList = opsMetadata.flat().filter(function (_a) {\r\n        var type = _a.type;\r\n        return type != metadata_1.GateType.Invalid;\r\n    });\r\n    return { metadataList: metadataList, svgWidth: endX };\r\n};\r\nexports.processOperations = processOperations;\r\n/**\r\n * Group gates provided by operations into their respective registers.\r\n *\r\n * @param operations Array of operations.\r\n * @param numRegs    Total number of registers.\r\n *\r\n * @returns 2D array of indices where `groupedOps[i][j]` is the index of the operations\r\n *          at register `i` and column `j` (not yet aligned/padded).\r\n */\r\nvar _groupOperations = function (operations, registers) {\r\n    // NOTE: We get the max ID instead of just number of keys because there can be a qubit ID that\r\n    // isn't acted upon and thus does not show up as a key in registers.\r\n    var numRegs = Math.max.apply(Math, __spreadArray([-1], Object.keys(registers).map(Number), false)) + 1;\r\n    var groupedOps = Array.from(Array(numRegs), function () { return new Array(0); });\r\n    operations.forEach(function (_a, instrIdx) {\r\n        var targets = _a.targets, controls = _a.controls;\r\n        var ctrls = controls || [];\r\n        var qRegs = __spreadArray(__spreadArray([], ctrls, true), targets, true).filter(function (_a) {\r\n            var type = _a.type;\r\n            return (type || register_1.RegisterType.Qubit) === register_1.RegisterType.Qubit;\r\n        });\r\n        var qRegIdxList = qRegs.map(function (_a) {\r\n            var qId = _a.qId;\r\n            return qId;\r\n        });\r\n        var clsControls = ctrls.filter(function (_a) {\r\n            var type = _a.type;\r\n            return (type || register_1.RegisterType.Qubit) === register_1.RegisterType.Classical;\r\n        });\r\n        var isClassicallyControlled = clsControls.length > 0;\r\n        if (!isClassicallyControlled && qRegs.length === 0)\r\n            return;\r\n        // If operation is classically-controlled, pad all qubit registers. Otherwise, only pad\r\n        // the contiguous range of registers that it covers.\r\n        var minRegIdx = isClassicallyControlled ? 0 : Math.min.apply(Math, qRegIdxList);\r\n        var maxRegIdx = isClassicallyControlled ? numRegs - 1 : Math.max.apply(Math, qRegIdxList);\r\n        // Add operation also to registers that are in-between target registers\r\n        // so that other gates won't render in the middle.\r\n        for (var i = minRegIdx; i <= maxRegIdx; i++) {\r\n            groupedOps[i].push(instrIdx);\r\n        }\r\n    });\r\n    return groupedOps;\r\n};\r\nexports._groupOperations = _groupOperations;\r\n/**\r\n * Aligns operations by padding registers with `null`s to make sure that multiqubit\r\n * gates are in the same column.\r\n * e.g. ---[x]---[x]--\r\n *      ----------|---\r\n *\r\n * @param ops 2D array of operations. Each row represents a register\r\n *            and the operations acting on it (in-order).\r\n *\r\n * @returns 2D array of aligned operations padded with `null`s.\r\n */\r\nvar _alignOps = function (ops) {\r\n    var maxNumOps = Math.max.apply(Math, __spreadArray([0], ops.map(function (regOps) { return regOps.length; }), false));\r\n    var col = 0;\r\n    // Deep copy ops to be returned as paddedOps\r\n    var paddedOps = JSON.parse(JSON.stringify(ops));\r\n    while (col < maxNumOps) {\r\n        var _loop_1 = function (regIdx) {\r\n            var reg = paddedOps[regIdx];\r\n            if (reg.length <= col)\r\n                return \"continue\";\r\n            // Should never be null (nulls are only padded to previous columns)\r\n            var opIdx = reg[col];\r\n            // Get position of gate\r\n            var targetsPos = paddedOps.map(function (regOps) { return regOps.indexOf(opIdx); });\r\n            var gatePos = Math.max.apply(Math, __spreadArray([-1], targetsPos, false));\r\n            // If current column is not desired gate position, pad with null\r\n            if (col < gatePos) {\r\n                paddedOps[regIdx].splice(col, 0, null);\r\n                maxNumOps = Math.max(maxNumOps, paddedOps[regIdx].length);\r\n            }\r\n        };\r\n        for (var regIdx = 0; regIdx < paddedOps.length; regIdx++) {\r\n            _loop_1(regIdx);\r\n        }\r\n        col++;\r\n    }\r\n    return paddedOps;\r\n};\r\nexports._alignOps = _alignOps;\r\n/**\r\n * Retrieves the starting index of each classical register.\r\n *\r\n * @param ops     Array of operations.\r\n * @param idxList 2D array of aligned operation indices.\r\n *\r\n * @returns Array of classical register and their starting column indices in the form [[column, register]].\r\n */\r\nvar _getClassicalRegStart = function (ops, idxList) {\r\n    var clsRegs = [];\r\n    idxList.forEach(function (reg) {\r\n        var _loop_2 = function (col) {\r\n            var opIdx = reg[col];\r\n            if (opIdx != null && ops[opIdx].isMeasurement) {\r\n                var targetClsRegs = ops[opIdx].targets.filter(function (reg) { return reg.type === register_1.RegisterType.Classical; });\r\n                targetClsRegs.forEach(function (reg) { return clsRegs.push([col, reg]); });\r\n            }\r\n        };\r\n        for (var col = 0; col < reg.length; col++) {\r\n            _loop_2(col);\r\n        }\r\n    });\r\n    return clsRegs;\r\n};\r\nexports._getClassicalRegStart = _getClassicalRegStart;\r\n/**\r\n * Maps operation to metadata (e.g. gate type, position, dimensions, text)\r\n * required to render the image.\r\n *\r\n * @param op        Operation to be mapped into metadata format.\r\n * @param registers Array of registers.\r\n *\r\n * @returns Metadata representation of given operation.\r\n */\r\nvar _opToMetadata = function (op, registers) {\r\n    var metadata = {\r\n        type: metadata_1.GateType.Invalid,\r\n        x: 0,\r\n        controlsY: [],\r\n        targetsY: [],\r\n        label: '',\r\n        width: -1,\r\n    };\r\n    if (op == null)\r\n        return metadata;\r\n    var gate = op.gate, dataAttributes = op.dataAttributes, displayArgs = op.displayArgs, isMeasurement = op.isMeasurement, isConditional = op.isConditional, isControlled = op.isControlled, isAdjoint = op.isAdjoint, controls = op.controls, targets = op.targets, children = op.children, conditionalRender = op.conditionalRender;\r\n    // Set y coords\r\n    metadata.controlsY = (controls === null || controls === void 0 ? void 0 : controls.map(function (reg) { return _getRegY(reg, registers); })) || [];\r\n    metadata.targetsY = targets.map(function (reg) { return _getRegY(reg, registers); });\r\n    if (isConditional) {\r\n        // Classically-controlled operations\r\n        if (children == null || children.length == 0)\r\n            throw new Error('No children operations found for classically-controlled operation.');\r\n        // Gates to display when classical bit is 0.\r\n        var onZeroOps = children.filter(function (op) { return op.conditionalRender !== circuit_1.ConditionalRender.OnOne; });\r\n        var childrenInstrs = processOperations(onZeroOps, registers);\r\n        var zeroGates = childrenInstrs.metadataList;\r\n        var zeroChildWidth = childrenInstrs.svgWidth;\r\n        // Gates to display when classical bit is 1.\r\n        var onOneOps = children.filter(function (op) { return op.conditionalRender !== circuit_1.ConditionalRender.OnZero; });\r\n        childrenInstrs = processOperations(onOneOps, registers);\r\n        var oneGates = childrenInstrs.metadataList;\r\n        var oneChildWidth = childrenInstrs.svgWidth;\r\n        // Subtract startX (left-side) and 2*gatePadding (right-side) from nested child gates width\r\n        var width = Math.max(zeroChildWidth, oneChildWidth) - constants_1.startX - constants_1.gatePadding * 2;\r\n        metadata.type = metadata_1.GateType.ClassicalControlled;\r\n        metadata.children = [zeroGates, oneGates];\r\n        // Add additional width from control button and inner box padding for dashed box\r\n        metadata.width = width + constants_1.controlBtnOffset + constants_1.groupBoxPadding * 2;\r\n        // Set targets to first and last quantum registers so we can render the surrounding box\r\n        // around all quantum registers.\r\n        var qubitsY = Object.values(registers).map(function (_a) {\r\n            var y = _a.y;\r\n            return y;\r\n        });\r\n        if (qubitsY.length > 0)\r\n            metadata.targetsY = [Math.min.apply(Math, qubitsY), Math.max.apply(Math, qubitsY)];\r\n    }\r\n    else if (conditionalRender == circuit_1.ConditionalRender.AsGroup && ((children === null || children === void 0 ? void 0 : children.length) || 0) > 0) {\r\n        var childrenInstrs = processOperations(children, registers);\r\n        metadata.type = metadata_1.GateType.Group;\r\n        metadata.children = childrenInstrs.metadataList;\r\n        // _zoomButton function in gateFormatter.ts relies on\r\n        // 'expanded' attribute to render zoom button\r\n        metadata.dataAttributes = { expanded: 'true' };\r\n        // Subtract startX (left-side) and add inner box padding (minus nested gate padding) for dashed box\r\n        metadata.width = childrenInstrs.svgWidth - constants_1.startX + (constants_1.groupBoxPadding - constants_1.gatePadding) * 2;\r\n    }\r\n    else if (isMeasurement) {\r\n        metadata.type = metadata_1.GateType.Measure;\r\n    }\r\n    else if (gate === 'SWAP') {\r\n        metadata.type = metadata_1.GateType.Swap;\r\n    }\r\n    else if (isControlled) {\r\n        metadata.type = gate === 'X' ? metadata_1.GateType.Cnot : metadata_1.GateType.ControlledUnitary;\r\n        metadata.label = gate;\r\n    }\r\n    else if (gate === 'X') {\r\n        metadata.type = metadata_1.GateType.X;\r\n        metadata.label = gate;\r\n    }\r\n    else {\r\n        // Any other gate treated as a simple unitary gate\r\n        metadata.type = metadata_1.GateType.Unitary;\r\n        metadata.label = gate;\r\n    }\r\n    // If adjoint, add ' to the end of gate label\r\n    if (isAdjoint && metadata.label.length > 0)\r\n        metadata.label += \"'\";\r\n    // If gate has extra arguments, display them\r\n    if (displayArgs != null)\r\n        metadata.displayArgs = displayArgs;\r\n    // Set gate width\r\n    metadata.width = (0, utils_1.getGateWidth)(metadata);\r\n    // Extend existing data attributes with user-provided data attributes\r\n    if (dataAttributes != null)\r\n        metadata.dataAttributes = __assign(__assign({}, metadata.dataAttributes), dataAttributes);\r\n    return metadata;\r\n};\r\nexports._opToMetadata = _opToMetadata;\r\n/**\r\n * Compute the y coord of a given register.\r\n *\r\n * @param reg       Register to compute y coord of.\r\n * @param registers Map of qubit IDs to RegisterMetadata.\r\n *\r\n * @returns The y coord of give register.\r\n */\r\nvar _getRegY = function (reg, registers) {\r\n    var type = reg.type, qId = reg.qId, cId = reg.cId;\r\n    if (!registers.hasOwnProperty(qId))\r\n        throw new Error(\"ERROR: Qubit register with ID \".concat(qId, \" not found.\"));\r\n    var _a = registers[qId], y = _a.y, children = _a.children;\r\n    switch (type) {\r\n        case undefined:\r\n        case register_1.RegisterType.Qubit:\r\n            return y;\r\n        case register_1.RegisterType.Classical:\r\n            if (children == null)\r\n                throw new Error(\"ERROR: No classical registers found for qubit ID \".concat(qId, \".\"));\r\n            if (cId == null)\r\n                throw new Error(\"ERROR: No ID defined for classical register associated with qubit ID \".concat(qId, \".\"));\r\n            if (children.length <= cId)\r\n                throw new Error(\"ERROR: Classical register ID \".concat(cId, \" invalid for qubit ID \").concat(qId, \" with \").concat(children.length, \" classical register(s).\"));\r\n            return children[cId].y;\r\n        default:\r\n            throw new Error(\"ERROR: Unknown register type \".concat(type, \".\"));\r\n    }\r\n};\r\nexports._getRegY = _getRegY;\r\n/**\r\n * Splits `targets` if non-adjacent or intersected by classical registers.\r\n *\r\n * @param targets       Target qubit registers.\r\n * @param classicalRegY y coords of classical registers overlapping current column.\r\n * @param registers     Mapping from register qubit IDs to register metadata.\r\n *\r\n * @returns Groups of target qubit y coords.\r\n */\r\nvar _splitTargetsY = function (targets, classicalRegY, registers) {\r\n    if (targets.length === 0)\r\n        return [];\r\n    // Get qIds sorted by ascending y value\r\n    var orderedQIds = Object.keys(registers).map(Number);\r\n    orderedQIds.sort(function (a, b) { return registers[a].y - registers[b].y; });\r\n    var qIdPosition = {};\r\n    orderedQIds.forEach(function (qId, i) { return (qIdPosition[qId] = i); });\r\n    // Sort targets and classicalRegY by ascending y value\r\n    targets = targets.slice();\r\n    targets.sort(function (a, b) {\r\n        var posDiff = qIdPosition[a.qId] - qIdPosition[b.qId];\r\n        if (posDiff === 0 && a.cId != null && b.cId != null)\r\n            return a.cId - b.cId;\r\n        else\r\n            return posDiff;\r\n    });\r\n    classicalRegY = classicalRegY.slice();\r\n    classicalRegY.sort(function (a, b) { return a - b; });\r\n    var prevPos = 0;\r\n    var prevY = 0;\r\n    return targets.reduce(function (groups, target) {\r\n        var y = _getRegY(target, registers);\r\n        var pos = qIdPosition[target.qId];\r\n        // Split into new group if one of the following holds:\r\n        //      1. First target register\r\n        //      2. Non-adjacent qubit registers\r\n        //      3. There is a classical register between current and previous register\r\n        if (groups.length === 0 || pos > prevPos + 1 || (classicalRegY[0] > prevY && classicalRegY[0] < y))\r\n            groups.push([y]);\r\n        else\r\n            groups[groups.length - 1].push(y);\r\n        prevPos = pos;\r\n        prevY = y;\r\n        // Remove classical registers that are higher than current y\r\n        while (classicalRegY.length > 0 && classicalRegY[0] <= y)\r\n            classicalRegY.shift();\r\n        return groups;\r\n    }, []);\r\n};\r\nexports._splitTargetsY = _splitTargetsY;\r\n/**\r\n * Updates the x coord of each metadata in the given 2D array of metadata and returns rightmost x coord.\r\n *\r\n * @param opsMetadata  2D array of metadata.\r\n * @param columnWidths Array of column widths.\r\n *\r\n * @returns Rightmost x coord.\r\n */\r\nvar _fillMetadataX = function (opsMetadata, columnWidths) {\r\n    var currX = constants_1.startX;\r\n    var colStartX = columnWidths.map(function (width) {\r\n        var x = currX;\r\n        currX += width + constants_1.gatePadding * 2;\r\n        return x;\r\n    });\r\n    var endX = currX;\r\n    opsMetadata.forEach(function (regOps) {\r\n        return regOps.forEach(function (metadata, col) {\r\n            var x = colStartX[col];\r\n            switch (metadata.type) {\r\n                case metadata_1.GateType.ClassicalControlled:\r\n                case metadata_1.GateType.Group:\r\n                    // Subtract startX offset from nested gates and add offset and padding\r\n                    var offset = x - constants_1.startX + constants_1.groupBoxPadding;\r\n                    if (metadata.type === metadata_1.GateType.ClassicalControlled)\r\n                        offset += constants_1.controlBtnOffset;\r\n                    // Offset each x coord in children gates\r\n                    _offsetChildrenX(metadata.children, offset);\r\n                    // We don't use the centre x coord because we only care about the rightmost x for\r\n                    // rendering the box around the group of nested gates\r\n                    metadata.x = x;\r\n                    break;\r\n                default:\r\n                    metadata.x = x + columnWidths[col] / 2;\r\n                    break;\r\n            }\r\n        });\r\n    });\r\n    return endX;\r\n};\r\nexports._fillMetadataX = _fillMetadataX;\r\n/**\r\n * Offset x coords of nested children operations.\r\n *\r\n * @param children 2D array of children metadata.\r\n * @param offset   x coord offset.\r\n */\r\nvar _offsetChildrenX = function (children, offset) {\r\n    if (children == null)\r\n        return;\r\n    children.flat().forEach(function (child) {\r\n        child.x += offset;\r\n        _offsetChildrenX(child.children, offset);\r\n    });\r\n};\r\nexports._offsetChildrenX = _offsetChildrenX;\r\n","\"use strict\";\r\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RegisterType = void 0;\r\n/**\r\n * Type of register.\r\n */\r\nvar RegisterType;\r\n(function (RegisterType) {\r\n    RegisterType[RegisterType[\"Qubit\"] = 0] = \"Qubit\";\r\n    RegisterType[RegisterType[\"Classical\"] = 1] = \"Classical\";\r\n})(RegisterType = exports.RegisterType || (exports.RegisterType = {}));\r\n","\"use strict\";\r\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Sqore = void 0;\r\nvar inputFormatter_1 = require(\"./formatters/inputFormatter\");\r\nvar gateFormatter_1 = require(\"./formatters/gateFormatter\");\r\nvar registerFormatter_1 = require(\"./formatters/registerFormatter\");\r\nvar process_1 = require(\"./process\");\r\nvar circuit_1 = require(\"./circuit\");\r\nvar metadata_1 = require(\"./metadata\");\r\nvar styles_1 = require(\"./styles\");\r\nvar utils_1 = require(\"./utils\");\r\nvar constants_1 = require(\"./constants\");\r\n/**\r\n * Entrypoint class for rendering circuit visualizations.\r\n */\r\nvar Sqore = /** @class */ (function () {\r\n    /**\r\n     * Initializes Sqore object with custom styles.\r\n     *\r\n     * @param circuit Circuit to be visualized.\r\n     * @param style Custom visualization style.\r\n     */\r\n    function Sqore(circuit, style) {\r\n        if (style === void 0) { style = {}; }\r\n        this.style = {};\r\n        this.gateRegistry = {};\r\n        this.circuit = circuit;\r\n        this.style = this.getStyle(style);\r\n    }\r\n    /**\r\n     * Render circuit into `container` at the specified layer depth.\r\n     *\r\n     * @param container HTML element for rendering visualization into.\r\n     * @param renderDepth Initial layer depth at which to render gates.\r\n     */\r\n    Sqore.prototype.draw = function (container, renderDepth) {\r\n        var _this = this;\r\n        if (renderDepth === void 0) { renderDepth = 0; }\r\n        // Inject into container\r\n        if (container == null)\r\n            throw new Error(\"Container not provided.\");\r\n        // Create copy of circuit to prevent mutation\r\n        var circuit = JSON.parse(JSON.stringify(this.circuit));\r\n        // Assign unique IDs to each operation\r\n        circuit.operations.forEach(function (op, i) { return _this.fillGateRegistry(op, i.toString()); });\r\n        // Render operations at starting at given depth\r\n        circuit.operations = this.selectOpsAtDepth(circuit.operations, renderDepth);\r\n        // If only one top-level operation, expand automatically:\r\n        if (circuit.operations.length == 1 &&\r\n            circuit.operations[0].dataAttributes != null &&\r\n            circuit.operations[0].dataAttributes.hasOwnProperty('id')) {\r\n            var id = circuit.operations[0].dataAttributes['id'];\r\n            this.expandOperation(circuit.operations, id);\r\n        }\r\n        this.renderCircuit(container, circuit);\r\n    };\r\n    /**\r\n     * Retrieve style for visualization.\r\n     *\r\n     * @param style Custom style or style name.\r\n     *\r\n     * @returns Custom style.\r\n     */\r\n    Sqore.prototype.getStyle = function (style) {\r\n        if (style === void 0) { style = {}; }\r\n        if (typeof style === 'string' || style instanceof String) {\r\n            var styleName = style;\r\n            if (!styles_1.STYLES.hasOwnProperty(styleName)) {\r\n                console.error(\"No style \".concat(styleName, \" found in STYLES.\"));\r\n                return {};\r\n            }\r\n            style = styles_1.STYLES[styleName];\r\n        }\r\n        return style;\r\n    };\r\n    /**\r\n     * Render circuit into `container`.\r\n     *\r\n     * @param container HTML element for rendering visualization into.\r\n     * @param circuit Circuit object to be rendered.\r\n     */\r\n    Sqore.prototype.renderCircuit = function (container, circuit) {\r\n        // Create visualization components\r\n        var composedSqore = this.compose(circuit);\r\n        var svg = this.generateSvg(composedSqore);\r\n        container.innerHTML = '';\r\n        container.appendChild(svg);\r\n        this.addGateClickHandlers(container, circuit);\r\n    };\r\n    /**\r\n     * Generates the components required for visualization.\r\n     *\r\n     * @param circuit Circuit to be visualized.\r\n     *\r\n     * @returns `ComposedSqore` object containing metadata for visualization.\r\n     */\r\n    Sqore.prototype.compose = function (circuit) {\r\n        var add = function (acc, gate) {\r\n            var _a;\r\n            if (Array.isArray(gate)) {\r\n                gate.forEach(function (g) { return add(acc, g); });\r\n            }\r\n            else {\r\n                acc.push(gate);\r\n                (_a = gate.children) === null || _a === void 0 ? void 0 : _a.forEach(function (g) { return add(acc, g); });\r\n            }\r\n        };\r\n        var flatten = function (gates) {\r\n            var result = [];\r\n            add(result, gates);\r\n            return result;\r\n        };\r\n        var qubits = circuit.qubits, operations = circuit.operations;\r\n        var _a = (0, inputFormatter_1.formatInputs)(qubits), qubitWires = _a.qubitWires, registers = _a.registers, svgHeight = _a.svgHeight;\r\n        var _b = (0, process_1.processOperations)(operations, registers), metadataList = _b.metadataList, svgWidth = _b.svgWidth;\r\n        var formattedGates = (0, gateFormatter_1.formatGates)(metadataList);\r\n        var measureGates = flatten(metadataList).filter(function (_a) {\r\n            var type = _a.type;\r\n            return type === metadata_1.GateType.Measure;\r\n        });\r\n        var formattedRegs = (0, registerFormatter_1.formatRegisters)(registers, measureGates, svgWidth);\r\n        var composedSqore = {\r\n            width: svgWidth,\r\n            height: svgHeight,\r\n            elements: [qubitWires, formattedRegs, formattedGates],\r\n        };\r\n        return composedSqore;\r\n    };\r\n    /**\r\n     * Generates visualization of `composedSqore` as an SVG.\r\n     *\r\n     * @param composedSqore ComposedSqore to be visualized.\r\n     *\r\n     * @returns SVG representation of circuit visualization.\r\n     */\r\n    Sqore.prototype.generateSvg = function (composedSqore) {\r\n        var width = composedSqore.width, height = composedSqore.height, elements = composedSqore.elements;\r\n        var uuid = (0, utils_1.createUUID)();\r\n        var svg = document.createElementNS(constants_1.svgNS, 'svg');\r\n        svg.setAttribute('id', uuid);\r\n        svg.setAttribute('class', 'qviz');\r\n        svg.setAttribute('width', width.toString());\r\n        svg.setAttribute('height', height.toString());\r\n        svg.style.setProperty('max-width', 'fit-content');\r\n        // Add styles\r\n        var css = document.createElement('style');\r\n        css.innerHTML = (0, styles_1.style)(this.style);\r\n        svg.appendChild(css);\r\n        // Add body elements\r\n        elements.forEach(function (element) { return svg.appendChild(element); });\r\n        return svg;\r\n    };\r\n    /**\r\n     * Depth-first traversal to assign unique ID to `operation`.\r\n     * The operation is assigned the id `id` and its `i`th child is recursively given\r\n     * the id `${id}-${i}`.\r\n     *\r\n     * @param operation Operation to be assigned.\r\n     * @param id: ID to assign to `operation`.\r\n     *\r\n     */\r\n    Sqore.prototype.fillGateRegistry = function (operation, id) {\r\n        var _this = this;\r\n        var _a;\r\n        if (operation.dataAttributes == null)\r\n            operation.dataAttributes = {};\r\n        operation.dataAttributes['id'] = id;\r\n        // By default, operations cannot be zoomed-out\r\n        operation.dataAttributes['zoom-out'] = 'false';\r\n        this.gateRegistry[id] = operation;\r\n        (_a = operation.children) === null || _a === void 0 ? void 0 : _a.forEach(function (childOp, i) {\r\n            _this.fillGateRegistry(childOp, \"\".concat(id, \"-\").concat(i));\r\n            if (childOp.dataAttributes == null)\r\n                childOp.dataAttributes = {};\r\n            // Children operations can be zoomed out\r\n            childOp.dataAttributes['zoom-out'] = 'true';\r\n        });\r\n        // Composite operations can be zoomed in\r\n        operation.dataAttributes['zoom-in'] = (operation.children != null).toString();\r\n    };\r\n    /**\r\n     * Pick out operations that are at or below `renderDepth`.\r\n     *\r\n     * @param operations List of circuit operations.\r\n     * @param renderDepth Initial layer depth at which to render gates.\r\n     *\r\n     * @returns List of operations at or below specifed depth.\r\n     */\r\n    Sqore.prototype.selectOpsAtDepth = function (operations, renderDepth) {\r\n        var _this = this;\r\n        if (renderDepth < 0)\r\n            throw new Error(\"Invalid renderDepth of \".concat(renderDepth, \". Needs to be >= 0.\"));\r\n        if (renderDepth === 0)\r\n            return operations;\r\n        return operations\r\n            .map(function (op) { return (op.children != null ? _this.selectOpsAtDepth(op.children, renderDepth - 1) : op); })\r\n            .flat();\r\n    };\r\n    /**\r\n     * Add interactive click handlers to circuit HTML elements.\r\n     *\r\n     * @param container HTML element containing visualized circuit.\r\n     * @param circuit Circuit to be visualized.\r\n     *\r\n     */\r\n    Sqore.prototype.addGateClickHandlers = function (container, circuit) {\r\n        this.addClassicalControlHandlers(container);\r\n        this.addZoomHandlers(container, circuit);\r\n    };\r\n    /**\r\n     * Add interactive click handlers for classically-controlled operations.\r\n     *\r\n     * @param container HTML element containing visualized circuit.\r\n     *\r\n     */\r\n    Sqore.prototype.addClassicalControlHandlers = function (container) {\r\n        container.querySelectorAll('.classically-controlled-btn').forEach(function (btn) {\r\n            // Zoom in on clicked gate\r\n            btn.addEventListener('click', function (evt) {\r\n                var _a;\r\n                var textSvg = btn.querySelector('text');\r\n                var group = btn.parentElement;\r\n                if (textSvg == null || group == null)\r\n                    return;\r\n                var currValue = (_a = textSvg.firstChild) === null || _a === void 0 ? void 0 : _a.nodeValue;\r\n                var zeroGates = group === null || group === void 0 ? void 0 : group.querySelector('.gates-zero');\r\n                var oneGates = group === null || group === void 0 ? void 0 : group.querySelector('.gates-one');\r\n                switch (currValue) {\r\n                    case '?':\r\n                        textSvg.childNodes[0].nodeValue = '1';\r\n                        group.classList.remove('classically-controlled-unknown');\r\n                        group.classList.remove('classically-controlled-zero');\r\n                        group.classList.add('classically-controlled-one');\r\n                        zeroGates === null || zeroGates === void 0 ? void 0 : zeroGates.classList.add('hidden');\r\n                        oneGates === null || oneGates === void 0 ? void 0 : oneGates.classList.remove('hidden');\r\n                        break;\r\n                    case '1':\r\n                        textSvg.childNodes[0].nodeValue = '0';\r\n                        group.classList.remove('classically-controlled-unknown');\r\n                        group.classList.add('classically-controlled-zero');\r\n                        group.classList.remove('classically-controlled-one');\r\n                        zeroGates === null || zeroGates === void 0 ? void 0 : zeroGates.classList.remove('hidden');\r\n                        oneGates === null || oneGates === void 0 ? void 0 : oneGates.classList.add('hidden');\r\n                        break;\r\n                    case '0':\r\n                        textSvg.childNodes[0].nodeValue = '?';\r\n                        group.classList.add('classically-controlled-unknown');\r\n                        group.classList.remove('classically-controlled-zero');\r\n                        group.classList.remove('classically-controlled-one');\r\n                        zeroGates === null || zeroGates === void 0 ? void 0 : zeroGates.classList.remove('hidden');\r\n                        oneGates === null || oneGates === void 0 ? void 0 : oneGates.classList.remove('hidden');\r\n                        break;\r\n                }\r\n                evt.stopPropagation();\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Add interactive click handlers for zoom-in/out functionality.\r\n     *\r\n     * @param container HTML element containing visualized circuit.\r\n     * @param circuit Circuit to be visualized.\r\n     *\r\n     */\r\n    Sqore.prototype.addZoomHandlers = function (container, circuit) {\r\n        var _this = this;\r\n        container.querySelectorAll('.gate .gate-control').forEach(function (ctrl) {\r\n            // Zoom in on clicked gate\r\n            ctrl.addEventListener('click', function (ev) {\r\n                var _a;\r\n                var gateId = (_a = ctrl.parentElement) === null || _a === void 0 ? void 0 : _a.getAttribute('data-id');\r\n                if (typeof gateId == 'string') {\r\n                    if (ctrl.classList.contains('gate-collapse')) {\r\n                        _this.collapseOperation(circuit.operations, gateId);\r\n                    }\r\n                    else if (ctrl.classList.contains('gate-expand')) {\r\n                        _this.expandOperation(circuit.operations, gateId);\r\n                    }\r\n                    _this.renderCircuit(container, circuit);\r\n                    ev.stopPropagation();\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Expand selected operation for zoom-in interaction.\r\n     *\r\n     * @param operations List of circuit operations.\r\n     * @param id ID of operation to expand.\r\n     *\r\n     */\r\n    Sqore.prototype.expandOperation = function (operations, id) {\r\n        var _this = this;\r\n        operations.forEach(function (op) {\r\n            if (op.conditionalRender === circuit_1.ConditionalRender.AsGroup)\r\n                _this.expandOperation(op.children || [], id);\r\n            if (op.dataAttributes == null)\r\n                return op;\r\n            var opId = op.dataAttributes['id'];\r\n            if (opId === id && op.children != null) {\r\n                op.conditionalRender = circuit_1.ConditionalRender.AsGroup;\r\n                op.dataAttributes['expanded'] = 'true';\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Collapse selected operation for zoom-out interaction.\r\n     *\r\n     * @param operations List of circuit operations.\r\n     * @param id ID of operation to collapse.\r\n     *\r\n     */\r\n    Sqore.prototype.collapseOperation = function (operations, parentId) {\r\n        var _this = this;\r\n        operations.forEach(function (op) {\r\n            if (op.conditionalRender === circuit_1.ConditionalRender.AsGroup)\r\n                _this.collapseOperation(op.children || [], parentId);\r\n            if (op.dataAttributes == null)\r\n                return op;\r\n            var opId = op.dataAttributes['id'];\r\n            // Collapse parent gate and its children\r\n            if (opId.startsWith(parentId)) {\r\n                op.conditionalRender = circuit_1.ConditionalRender.Always;\r\n                delete op.dataAttributes['expanded'];\r\n            }\r\n        });\r\n    };\r\n    return Sqore;\r\n}());\r\nexports.Sqore = Sqore;\r\n","\"use strict\";\r\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.style = exports.STYLES = void 0;\r\nvar defaultStyle = {\r\n    lineStroke: '#000000',\r\n    lineWidth: 1,\r\n    textColour: '#000000',\r\n    unitary: '#D9F1FA',\r\n    oplus: '#FFFFFF',\r\n    measure: '#FFDE86',\r\n    classicalUnknown: '#E5E5E5',\r\n    classicalZero: '#C40000',\r\n    classicalOne: '#4059BD',\r\n    classicalZeroText: '#FFFFFF',\r\n    classicalOneText: '#FFFFFF',\r\n};\r\nvar blackAndWhiteStyle = {\r\n    lineStroke: '#000000',\r\n    lineWidth: 1,\r\n    textColour: '#000000',\r\n    unitary: '#FFFFFF',\r\n    oplus: '#FFFFFF',\r\n    measure: '#FFFFFF',\r\n    classicalUnknown: '#FFFFFF',\r\n    classicalZero: '#000000',\r\n    classicalOne: '#000000',\r\n    classicalZeroText: '#FFFFFF',\r\n    classicalOneText: '#FFFFFF',\r\n};\r\nvar invertedStyle = {\r\n    lineStroke: '#FFFFFF',\r\n    lineWidth: 1,\r\n    textColour: '#FFFFFF',\r\n    unitary: '#000000',\r\n    oplus: '#000000',\r\n    measure: '#000000',\r\n    classicalUnknown: '#000000',\r\n    classicalZero: '#FFFFFF',\r\n    classicalOne: '#FFFFFF',\r\n    classicalZeroText: '#000000',\r\n    classicalOneText: '#000000',\r\n};\r\n/**\r\n * Set of default styles.\r\n */\r\nexports.STYLES = {\r\n    /** Default style with coloured gates. */\r\n    Default: defaultStyle,\r\n    /** Black and white style. */\r\n    BlackAndWhite: blackAndWhiteStyle,\r\n    /** Inverted black and white style (for black backgrounds). */\r\n    Inverted: invertedStyle,\r\n};\r\n/**\r\n * CSS style script to be injected into visualization SVG.\r\n *\r\n * @param customStyle Custom style configuration.\r\n *\r\n * @returns String containing CSS style script.\r\n */\r\nvar style = function (customStyle) {\r\n    if (customStyle === void 0) { customStyle = {}; }\r\n    var styleConfig = __assign(__assign({}, defaultStyle), customStyle);\r\n    return \"\".concat(_defaultGates(styleConfig), \"\\n    \").concat(_classicallyControlledGates(styleConfig), \"\\n    \").concat(_expandCollapse);\r\n};\r\nexports.style = style;\r\nvar _defaultGates = function (styleConfig) { return \"\\n    line,\\n    circle,\\n    rect {\\n        stroke: \".concat(styleConfig.lineStroke, \";\\n        stroke-width: \").concat(styleConfig.lineWidth, \";\\n    }\\n    text {\\n        fill: \").concat(styleConfig.textColour, \";\\n        dominant-baseline: middle;\\n        text-anchor: middle;\\n        font-family: Arial;\\n    }\\n    .control-dot {\\n        fill: \").concat(styleConfig.lineStroke, \";\\n    }\\n    .oplus line, .oplus circle {\\n        fill: \").concat(styleConfig.oplus, \";\\n        stroke-width: 2;\\n    }\\n    .gate-unitary {\\n        fill: \").concat(styleConfig.unitary, \";\\n    }\\n    .gate-measure {\\n        fill: \").concat(styleConfig.measure, \";\\n    }\\n    rect.gate-swap {\\n        fill: transparent;\\n        stroke: transparent;\\n    }\\n    .arc-measure {\\n        stroke: \").concat(styleConfig.lineStroke, \";\\n        fill: none;\\n        stroke-width: \").concat(styleConfig.lineWidth, \";\\n    }\\n    .register-classical {\\n        stroke-width: \").concat((styleConfig.lineWidth || 0) / 2, \";\\n    }\"); };\r\nvar _classicallyControlledGates = function (styleConfig) {\r\n    var gateOutline = \"\\n    .classically-controlled-one .classical-container,\\n    .classically-controlled-one .classical-line {\\n        stroke: \".concat(styleConfig.classicalOne, \";\\n        stroke-width: \").concat((styleConfig.lineWidth || 0) + 0.3, \";\\n        fill: \").concat(styleConfig.classicalOne, \";\\n        fill-opacity: 0.1;\\n    }\\n    .classically-controlled-zero .classical-container,\\n    .classically-controlled-zero .classical-line {\\n        stroke: \").concat(styleConfig.classicalZero, \";\\n        stroke-width: \").concat((styleConfig.lineWidth || 0) + 0.3, \";\\n        fill: \").concat(styleConfig.classicalZero, \";\\n        fill-opacity: 0.1;\\n    }\");\r\n    var controlBtn = \"\\n    .classically-controlled-btn {\\n        cursor: pointer;\\n    }\\n    .classically-controlled-unknown .classically-controlled-btn {\\n        fill: \".concat(styleConfig.classicalUnknown, \";\\n    }\\n    .classically-controlled-one .classically-controlled-btn {\\n        fill: \").concat(styleConfig.classicalOne, \";\\n    }\\n    .classically-controlled-zero .classically-controlled-btn {\\n        fill: \").concat(styleConfig.classicalZero, \";\\n    }\");\r\n    var controlBtnText = \"\\n    .classically-controlled-btn text {\\n        dominant-baseline: middle;\\n        text-anchor: middle;\\n        stroke: none;\\n        font-family: Arial;\\n    }\\n    .classically-controlled-unknown .classically-controlled-btn text {\\n        fill: \".concat(styleConfig.textColour, \";\\n    }\\n    .classically-controlled-one .classically-controlled-btn text {\\n        fill: \").concat(styleConfig.classicalOneText, \";\\n    }\\n    .classically-controlled-zero .classically-controlled-btn text {\\n        fill: \").concat(styleConfig.classicalZeroText, \";\\n    }\");\r\n    return \"\\n    .hidden {\\n        display: none;\\n    }\\n    .classically-controlled-unknown {\\n        opacity: 0.25;\\n    }\\n\\n    \".concat(gateOutline, \"\\n    \").concat(controlBtn, \"\\n    \").concat(controlBtnText);\r\n};\r\nvar _expandCollapse = \"\\n    .qviz .gate-collapse,\\n    .qviz .gate-expand {\\n        opacity: 0;\\n        transition: opacity 1s;\\n    }\\n\\n    .qviz:hover .gate-collapse,\\n    .qviz:hover .gate-expand {\\n        visibility: visible;\\n        opacity: 0.2;\\n        transition: visibility 1s;\\n        transition: opacity 1s;\\n    }\\n\\n    .gate-expand, .gate-collapse {\\n        cursor: pointer;\\n    }\\n\\n    .gate-collapse circle,\\n    .gate-expand circle {\\n        fill: white;\\n        stroke-width: 2px;\\n        stroke: black;\\n    }\\n    .gate-collapse path,\\n    .gate-expand path {\\n        stroke-width: 4px;\\n        stroke: black;\\n    }\\n\\n    .gate:hover > .gate-collapse,\\n    .gate:hover > .gate-expand {\\n        visibility: visible;\\n        opacity: 1;\\n        transition: opacity 1s;\\n    }\";\r\n","\"use strict\";\r\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports._getStringWidth = exports.getGateWidth = exports.createUUID = void 0;\r\nvar metadata_1 = require(\"./metadata\");\r\nvar constants_1 = require(\"./constants\");\r\n/**\r\n * Generate a UUID using `Math.random`.\r\n * Note: this implementation came from https://stackoverflow.com/questions/105034/how-to-create-guid-uuid\r\n * and is not cryptographically secure but works for our use case.\r\n *\r\n * @returns UUID string.\r\n */\r\nvar createUUID = function () {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        var r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;\r\n        return v.toString(16);\r\n    });\r\n};\r\nexports.createUUID = createUUID;\r\n/**\r\n * Calculate the width of a gate, given its metadata.\r\n *\r\n * @param metadata Metadata of a given gate.\r\n *\r\n * @returns Width of given gate (in pixels).\r\n */\r\nvar getGateWidth = function (_a) {\r\n    var type = _a.type, label = _a.label, displayArgs = _a.displayArgs, width = _a.width;\r\n    if (width > 0)\r\n        return width;\r\n    switch (type) {\r\n        case metadata_1.GateType.Measure:\r\n        case metadata_1.GateType.Cnot:\r\n        case metadata_1.GateType.Swap:\r\n            return constants_1.minGateWidth;\r\n        default:\r\n            var labelWidth = _getStringWidth(label);\r\n            var argsWidth = displayArgs != null ? _getStringWidth(displayArgs, constants_1.argsFontSize) : 0;\r\n            var textWidth = Math.max(labelWidth, argsWidth) + constants_1.labelPadding * 2;\r\n            return Math.max(constants_1.minGateWidth, textWidth);\r\n    }\r\n};\r\nexports.getGateWidth = getGateWidth;\r\n/**\r\n * Get the width of a string with font-size `fontSize` and font-family Arial.\r\n *\r\n * @param text     Input string.\r\n * @param fontSize Font size of `text`.\r\n *\r\n * @returns Pixel width of given string.\r\n */\r\nvar _getStringWidth = function (text, fontSize) {\r\n    if (fontSize === void 0) { fontSize = constants_1.labelFontSize; }\r\n    var canvas = document.createElement('canvas');\r\n    var context = canvas.getContext('2d');\r\n    if (context == null)\r\n        throw new Error('Null canvas');\r\n    context.font = \"\".concat(fontSize, \"px Arial\");\r\n    var metrics = context.measureText(text);\r\n    return metrics.width;\r\n};\r\nexports._getStringWidth = _getStringWidth;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\r\n// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.STYLES = exports.draw = void 0;\r\nvar sqore_1 = require(\"./sqore\");\r\n/**\r\n * Render `circuit` into `container` at the specified layer depth.\r\n *\r\n * @param circuit Circuit to be visualized.\r\n * @param container HTML element for rendering visualization into.\r\n * @param style Custom visualization style.\r\n * @param renderDepth Initial layer depth at which to render gates.\r\n */\r\nvar draw = function (circuit, container, style, renderDepth) {\r\n    if (style === void 0) { style = {}; }\r\n    if (renderDepth === void 0) { renderDepth = 0; }\r\n    var sqore = new sqore_1.Sqore(circuit, style);\r\n    sqore.draw(container, renderDepth);\r\n};\r\nexports.draw = draw;\r\nvar styles_1 = require(\"./styles\");\r\nObject.defineProperty(exports, \"STYLES\", { enumerable: true, get: function () { return styles_1.STYLES; } });\r\n"],"names":["root","factory","exports","module","define","amd","self","Object","defineProperty","value","ConditionalRender","regLineStart","argsFontSize","labelFontSize","controlBtnRadius","controlBtnOffset","nestedGroupPadding","groupBoxPadding","classicalRegHeight","registerHeight","labelPadding","gatePadding","gateHeight","minGateWidth","startY","startX","leftPadding","svgNS","dashedBox","dashedLine","arc","text","box","controlDot","circle","line","group","createSvgElement","constants_1","type","attributes","el","document","createElementNS","entries","forEach","_a","attrName","attrVal","setAttribute","svgElems","child","appendChild","x1","y1","x2","y2","className","attrs","toString","x","y","radius","cx","cy","r","width","height","class","fs","textContent","rx","ry","d","concat","__spreadArray","this","to","from","pack","arguments","length","ar","i","l","Array","prototype","slice","call","_classicalControlled","_groupedOperations","_controlledGate","_swap","_unitary","_measure","_zoomButton","_createGate","_formatGate","formatGates","metadata_1","formatUtils_1","opsMetadata","nestedDepth","formattedGates","map","metadata","controlsY","targetsY","label","displayArgs","GateType","Measure","Unitary","X","_x","Swap","Cnot","ControlledUnitary","Group","ClassicalControlled","Error","dataAttributes","attr","val","zoomBtn","undefined","_gatePosition","expanded","circleBorder","elements","ys","flatMap","maxY","Math","max","apply","minY","min","padding","mBox","mArc","meter","renderDashedLine","unitaryBoxes","_unitaryBox","lastBox","firstBox","vertLine","labelY","elems","argStrY","argText","push","bg","crosses","_cross","_","_oplus","line1","line2","targetGateSvgs","groupedTargetsY","flat","controlledDotsSvg","horLine","children","controlY","childrenZero","childrenOne","controlCircleX","controlCircle","_controlCircle","lineY1","lineY2","_qubitInput","formatInputs","register_1","qubits","qubitWires","registers","currY","id","numChildren","RegisterType","Qubit","clsReg","Classical","svgHeight","_qubitRegister","_classicalRegister","formatRegisters","measureGates","endX","formattedRegs","qId","Number","gateY","wireY","vLine1","vLine2","hLine1","hLine2","labelOffset","wire","__assign","assign","t","s","n","p","hasOwnProperty","_offsetChildrenX","_fillMetadataX","_splitTargetsY","_getRegY","_opToMetadata","_getClassicalRegStart","_alignOps","_groupOperations","processOperations","circuit_1","utils_1","operations","metadataList","svgWidth","groupedOps","alignedOps","numColumns","ops","columnsWidths","fill","classicalRegs","visited","regOps","opIdx","col","op","includes","classicalRegY","filter","regCol","reg","cId","targets","Invalid","numRegs","keys","instrIdx","ctrls","controls","qRegs","qRegIdxList","clsControls","isClassicallyControlled","minRegIdx","maxRegIdx","maxNumOps","paddedOps","JSON","parse","stringify","_loop_1","regIdx","targetsPos","indexOf","gatePos","splice","idxList","clsRegs","_loop_2","isMeasurement","targetClsRegs","gate","isConditional","isControlled","isAdjoint","conditionalRender","onZeroOps","OnOne","zeroGates","childrenInstrs","zeroChildWidth","onOneOps","OnZero","oneGates","oneChildWidth","qubitsY","values","AsGroup","getGateWidth","orderedQIds","sort","a","b","qIdPosition","posDiff","prevPos","prevY","reduce","groups","target","pos","shift","columnWidths","currX","colStartX","offset","Sqore","inputFormatter_1","gateFormatter_1","registerFormatter_1","process_1","styles_1","circuit","style","gateRegistry","getStyle","draw","container","renderDepth","_this","fillGateRegistry","selectOpsAtDepth","expandOperation","renderCircuit","String","styleName","STYLES","console","error","composedSqore","compose","svg","generateSvg","innerHTML","addGateClickHandlers","gates","result","add","acc","isArray","g","_b","uuid","createUUID","setProperty","css","createElement","element","operation","childOp","addClassicalControlHandlers","addZoomHandlers","querySelectorAll","btn","addEventListener","evt","textSvg","querySelector","parentElement","currValue","firstChild","nodeValue","childNodes","classList","remove","stopPropagation","ctrl","ev","gateId","getAttribute","contains","collapseOperation","parentId","startsWith","Always","defaultStyle","lineStroke","lineWidth","textColour","unitary","oplus","measure","classicalUnknown","classicalZero","classicalOne","classicalZeroText","classicalOneText","Default","BlackAndWhite","Inverted","customStyle","styleConfig","_defaultGates","_classicallyControlledGates","_expandCollapse","gateOutline","controlBtn","controlBtnText","_getStringWidth","replace","c","random","labelWidth","argsWidth","textWidth","fontSize","context","getContext","font","measureText","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","sqore_1","enumerable","get"],"sourceRoot":""}