import { Operation } from './circuit';
import { Register } from './register';
import { Sqore } from './sqore';
interface Context {
    container: HTMLElement;
    svg: SVGElement;
    operations: Operation[];
    wireData: number[];
    renderFn: () => void;
    paddingY: number;
    selectedId: string | null;
    selectedWire: string | null;
}
/**
 * Add editable elements and events.
 *
 * @param Container     HTML element for rendering visualization into.
 * @param sqore         Sqore object
 * @param useRefresh    Function to trigger circuit re-rendering
 */
declare const extensionDraggable: (container: HTMLElement, sqore: Sqore, useRefresh: () => void) => void;
/**
 * Find equivalent gate element of host element
 */
declare const _equivGateElem: (elem: SVGElement) => SVGElement | null;
/**
 * Find equivalent parent array of an operation
 */
declare const _equivParentArray: (dataId: string | null, operations: Operation[]) => Operation[] | null;
/**
 * Find an equivalent operation of an element based on its data-id
 */
declare const _equivOperation: (dataId: string | null, operations: Operation[]) => Operation | null;
/**
 * Get the last index of data-id
 * i.e: data-id = "0-1-2", _lastIndex will return 2
 */
declare const _lastIndex: (dataId: string) => number | undefined;
/**
 * Object exported for unit testing
 */
declare const exportedForTesting: {
    _wireYs: (elem: SVGGraphicsElement, wireData: number[]) => number[];
    _hostElems: (container: HTMLElement) => SVGGraphicsElement[];
    _wirePrefixes: (wireData: number[]) => {
        index: number;
        wireY: number;
        prefixX: number;
    }[];
    _center: (elem: SVGGraphicsElement) => {
        cX: number;
        cY: number;
    };
    _wireData: (container: HTMLElement) => number[];
    _equivGateElem: (elem: SVGElement) => SVGElement | null;
    _equivOperation: (dataId: string | null, operations: Operation[]) => Operation | null;
    _equivParentOperation: (dataId: string | null, operations: Operation[]) => Operation | null;
    _equivParentArray: (dataId: string | null, operations: Operation[]) => Operation[] | null;
    _moveX: (sourceId: string, targetId: string, operations: Operation[]) => Operation | null;
    _copyX: (sourceId: string, targetId: string, operations: Operation[]) => Operation | null;
    _moveY: (sourceWire: string, targetWire: string, operation: Operation, totalWires: number) => Operation;
    _offsetRecursively: (operation: Operation, wireOffset: number, totalWires: number) => Operation;
    _targets: (operation: Operation) => Register[] | [];
    _circularMod: (value: number, offset: number, total: number) => number;
    _indexes: (dataId: string) => number[];
    _lastIndex: (dataId: string) => number | undefined;
};
export { extensionDraggable, Context, _equivOperation, _equivGateElem, _equivParentArray, _lastIndex, exportedForTesting, };
