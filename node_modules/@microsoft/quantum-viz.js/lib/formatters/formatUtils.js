"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.dashedBox = exports.dashedLine = exports.arc = exports.text = exports.box = exports.controlDot = exports.circle = exports.line = exports.group = exports.createSvgElement = void 0;
var constants_1 = require("../constants");
// Helper functions for basic SVG components
/**
 * Create an SVG element.
 *
 * @param type The type of element to be created.
 * @param attributes The attributes that define the element.
 *
 * @returns SVG element.
 */
var createSvgElement = function (type, attributes) {
    if (attributes === void 0) { attributes = {}; }
    var el = document.createElementNS(constants_1.svgNS, type);
    Object.entries(attributes).forEach(function (_a) {
        var attrName = _a[0], attrVal = _a[1];
        return el.setAttribute(attrName, attrVal);
    });
    return el;
};
exports.createSvgElement = createSvgElement;
/**
 * Given an array of SVG elements, group them as an SVG group using the `<g>` tag.
 *
 * @param svgElems   Array of SVG elements.
 * @param attributes Key-value pairs of attributes and they values.
 *
 * @returns SVG element for grouped elements.
 */
var group = function (svgElems, attributes) {
    if (attributes === void 0) { attributes = {}; }
    var el = (0, exports.createSvgElement)('g', attributes);
    svgElems.forEach(function (child) { return el.appendChild(child); });
    return el;
};
exports.group = group;
/**
 * Generate an SVG line.
 *
 * @param x1        x coord of starting point of line.
 * @param y1        y coord of starting point of line.
 * @param x2        x coord of ending point of line.
 * @param y2        y coord fo ending point of line.
 * @param className Class name of element.
 *
 * @returns SVG element for line.
 */
var line = function (x1, y1, x2, y2, className) {
    var attrs = {
        x1: x1.toString(),
        x2: x2.toString(),
        y1: y1.toString(),
        y2: y2.toString(),
    };
    if (className != null)
        attrs['class'] = className;
    return (0, exports.createSvgElement)('line', attrs);
};
exports.line = line;
/**
 * Generate an SVG circle.
 *
 * @param x      x coord of circle.
 * @param y      y coord of circle.
 * @param radius Radius of circle.
 *
 * @returns SVG element for circle.
 */
var circle = function (x, y, radius, className) {
    var attrs = {
        cx: x.toString(),
        cy: y.toString(),
        r: radius.toString(),
    };
    if (className != null)
        attrs['class'] = className;
    return (0, exports.createSvgElement)('circle', attrs);
};
exports.circle = circle;
/**
 * Generate the SVG representation of a control dot used for controlled operations.
 *
 * @param x      x coord of circle.
 * @param y      y coord of circle.
 * @param radius Radius of circle.
 *
 * @returns SVG element for control dot.
 */
var controlDot = function (x, y, radius) {
    if (radius === void 0) { radius = 5; }
    return (0, exports.circle)(x, y, radius, 'control-dot');
};
exports.controlDot = controlDot;
/**
 * Generate the SVG representation of a unitary box that represents an arbitrary unitary operation.
 *
 * @param x         x coord of box.
 * @param y         y coord of box.
 * @param width     Width of box.
 * @param height    Height of box.
 * @param className Class name of element.
 *
 * @returns SVG element for unitary box.
 */
var box = function (x, y, width, height, className) {
    if (className === void 0) { className = 'gate-unitary'; }
    return (0, exports.createSvgElement)('rect', {
        class: className,
        x: x.toString(),
        y: y.toString(),
        width: width.toString(),
        height: height.toString(),
    });
};
exports.box = box;
/**
 * Generate the SVG text element from a given text string.
 *
 * @param text String to render as SVG text.
 * @param x    Middle x coord of text.
 * @param y    Middle y coord of text.
 * @param fs   Font size of text.
 *
 * @returns SVG element for text.
 */
var text = function (text, x, y, fs) {
    if (fs === void 0) { fs = constants_1.labelFontSize; }
    var el = (0, exports.createSvgElement)('text', {
        'font-size': fs.toString(),
        x: x.toString(),
        y: y.toString(),
    });
    el.textContent = text;
    return el;
};
exports.text = text;
/**
 * Generate the SVG representation of the arc used in the measurement box.
 *
 * @param x  x coord of arc.
 * @param y  y coord of arc.
 * @param rx x radius of arc.
 * @param ry y radius of arc.
 *
 * @returns SVG element for arc.
 */
var arc = function (x, y, rx, ry) {
    return (0, exports.createSvgElement)('path', {
        class: 'arc-measure',
        d: "M ".concat(x + 2 * rx, " ").concat(y, " A ").concat(rx, " ").concat(ry, " 0 0 0 ").concat(x, " ").concat(y),
    });
};
exports.arc = arc;
/**
 * Generate a dashed SVG line.
 *
 * @param x1        x coord of starting point of line.
 * @param y1        y coord of starting point of line.
 * @param x2        x coord of ending point of line.
 * @param y2        y coord fo ending point of line.
 * @param className Class name of element.
 *
 * @returns SVG element for dashed line.
 */
var dashedLine = function (x1, y1, x2, y2, className) {
    var el = (0, exports.line)(x1, y1, x2, y2, className);
    el.setAttribute('stroke-dasharray', '8, 8');
    return el;
};
exports.dashedLine = dashedLine;
/**
 * Generate the SVG representation of the dashed box used for enclosing groups of operations controlled on a classical register.
 *
 * @param x         x coord of box.
 * @param y         y coord of box.
 * @param width     Width of box.
 * @param height    Height of box.
 * @param className Class name of element.
 *
 * @returns SVG element for dashed box.
 */
var dashedBox = function (x, y, width, height, className) {
    var el = (0, exports.box)(x, y, width, height, className);
    el.setAttribute('fill-opacity', '0');
    el.setAttribute('stroke-dasharray', '8, 8');
    return el;
};
exports.dashedBox = dashedBox;
