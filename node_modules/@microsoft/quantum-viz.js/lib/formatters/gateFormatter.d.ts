import { Metadata } from '../metadata';
/**
 * Given an array of operations (in metadata format), return the SVG representation.
 *
 * @param opsMetadata Array of Metadata representation of operations.
 * @param nestedDepth Depth of nested operations (used in classically controlled and grouped operations).
 *
 * @returns SVG representation of operations.
 */
declare const formatGates: (opsMetadata: Metadata[], nestedDepth?: number) => SVGElement;
/**
 * Takes in an operation's metadata and formats it into SVG.
 *
 * @param metadata Metadata object representation of gate.
 * @param nestedDepth Depth of nested operations (used in classically controlled and grouped operations).
 *
 * @returns SVG representation of gate.
 */
declare const _formatGate: (metadata: Metadata, nestedDepth?: number) => SVGElement;
/**
 * Groups SVG elements into a gate SVG group.
 *
 * @param svgElems       Array of SVG elements.
 * @param dataAttributes Custom data attributes to be attached to SVG group.
 *
 * @returns SVG representation of a gate.
 */
declare const _createGate: (svgElems: SVGElement[], metadata: Metadata, nestedDepth: number) => SVGElement;
/**
 * Returns the expand/collapse button for an operation if it can be zoomed-in or zoomed-out,
 * respectively. If neither are allowed, return `null`.
 *
 * @param metadata Operation metadata.
 * @param nestedDepth Depth of nested operation.
 *
 * @returns SVG element for expand/collapse button if needed, or null otherwise.
 */
declare const _zoomButton: (metadata: Metadata, nestedDepth: number) => SVGElement | null;
/**
 * Creates a measurement gate at position (x, y).
 *
 * @param x  x coord of measurement gate.
 * @param y  y coord of measurement gate.
 *
 * @returns SVG representation of measurement gate.
 */
declare const _measure: (x: number, y: number) => SVGElement;
/**
 * Creates the SVG for a unitary gate on an arbitrary number of qubits.
 *
 * @param label            Gate label.
 * @param x                x coord of gate.
 * @param y                Array of y coords of registers acted upon by gate.
 * @param width            Width of gate.
 * @param displayArgs           Arguments passed in to gate.
 * @param renderDashedLine If true, draw dashed lines between non-adjacent unitaries.
 *
 * @returns SVG representation of unitary gate.
 */
declare const _unitary: (label: string, x: number, y: number[][], width: number, displayArgs?: string, renderDashedLine?: boolean) => SVGElement;
/**
 * Creates the SVG for a SWAP gate on y coords given by targetsY.
 *
 * @param x          Centre x coord of SWAP gate.
 * @param targetsY   y coords of target registers.
 *
 * @returns SVG representation of SWAP gate.
 */
declare const _swap: (metadata: Metadata, nestedDepth: number) => SVGElement;
/**
 * Produces the SVG representation of a controlled gate on multiple qubits.
 *
 * @param metadata Metadata of controlled gate.
 *
 * @returns SVG representation of controlled gate.
 */
declare const _controlledGate: (metadata: Metadata, nestedDepth: number) => SVGElement;
/**
 * Generates the SVG for a group of nested operations.
 *
 * @param metadata Metadata representation of gate.
 * @param nestedDepth Depth of nested operations (used in classically controlled and grouped operations).
 *
 * @returns SVG representation of gate.
 */
declare const _groupedOperations: (metadata: Metadata, nestedDepth: number) => SVGElement;
/**
 * Generates the SVG for a classically controlled group of operations.
 *
 * @param metadata Metadata representation of gate.
 * @param padding  Padding within dashed box.
 *
 * @returns SVG representation of gate.
 */
declare const _classicalControlled: (metadata: Metadata, padding?: number) => SVGElement;
export { formatGates, _formatGate, _createGate, _zoomButton, _measure, _unitary, _swap, _controlledGate, _groupedOperations, _classicalControlled, };
