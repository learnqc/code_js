"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports._qubitInput = exports.formatInputs = void 0;
var register_1 = require("../register");
var constants_1 = require("../constants");
var formatUtils_1 = require("./formatUtils");
/**
 * `formatInputs` takes in an array of Qubits and outputs the SVG string of formatted
 * qubit wires and a mapping from register IDs to register metadata (for rendering).
 *
 * @param qubits List of declared qubits.
 *
 * @returns returns the SVG string of formatted qubit wires, a mapping from registers
 *          to y coord and total SVG height.
 */
var formatInputs = function (qubits) {
    var qubitWires = [];
    var registers = {};
    var currY = constants_1.startY;
    qubits.forEach(function (_a) {
        var id = _a.id, numChildren = _a.numChildren;
        // Add qubit wire to list of qubit wires
        qubitWires.push(_qubitInput(currY));
        // Create qubit register
        registers[id] = { type: register_1.RegisterType.Qubit, y: currY };
        // If there are no attached classical registers, increment y by fixed register height
        if (numChildren == null || numChildren === 0) {
            currY += constants_1.registerHeight;
            return;
        }
        // Increment current height by classical register height for attached classical registers
        currY += constants_1.classicalRegHeight;
        // Add classical wires
        registers[id].children = Array.from(Array(numChildren), function () {
            var clsReg = { type: register_1.RegisterType.Classical, y: currY };
            currY += constants_1.classicalRegHeight;
            return clsReg;
        });
    });
    return {
        qubitWires: (0, formatUtils_1.group)(qubitWires),
        registers: registers,
        svgHeight: currY,
    };
};
exports.formatInputs = formatInputs;
/**
 * Generate the SVG text component for the input qubit register.
 *
 * @param y y coord of input wire to render in SVG.
 *
 * @returns SVG text component for the input register.
 */
var _qubitInput = function (y) {
    var el = (0, formatUtils_1.text)('|0‚ü©', constants_1.leftPadding, y, 16);
    el.setAttribute('text-anchor', 'start');
    el.setAttribute('dominant-baseline', 'middle');
    return el;
};
exports._qubitInput = _qubitInput;
