"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports._qubitRegister = exports._classicalRegister = exports.formatRegisters = void 0;
var constants_1 = require("../constants");
var metadata_1 = require("../metadata");
var formatUtils_1 = require("./formatUtils");
/**
 * Generate the SVG representation of the qubit register wires in `registers` and the classical wires
 * stemming from each measurement gate.
 *
 * @param registers    Map from register IDs to register metadata.
 * @param measureGates Array of measurement gates metadata.
 * @param endX         End x coord.
 *
 * @returns SVG representation of register wires.
 */
var formatRegisters = function (registers, measureGates, endX) {
    var formattedRegs = [];
    // Render qubit wires
    for (var qId in registers) {
        formattedRegs.push(_qubitRegister(Number(qId), endX, registers[qId].y));
    }
    // Render classical wires
    measureGates.forEach(function (_a) {
        var type = _a.type, x = _a.x, targetsY = _a.targetsY, controlsY = _a.controlsY;
        if (type !== metadata_1.GateType.Measure)
            return;
        var gateY = controlsY[0];
        targetsY.forEach(function (y) {
            formattedRegs.push(_classicalRegister(x, gateY, endX, y));
        });
    });
    return (0, formatUtils_1.group)(formattedRegs);
};
exports.formatRegisters = formatRegisters;
/**
 * Generates the SVG representation of a classical register.
 *
 * @param startX Start x coord.
 * @param gateY  y coord of measurement gate.
 * @param endX   End x coord.
 * @param wireY  y coord of wire.
 *
 * @returns SVG representation of the given classical register.
 */
var _classicalRegister = function (startX, gateY, endX, wireY) {
    var wirePadding = 1;
    // Draw vertical lines
    var vLine1 = (0, formatUtils_1.line)(startX + wirePadding, gateY, startX + wirePadding, wireY - wirePadding, 'register-classical');
    var vLine2 = (0, formatUtils_1.line)(startX - wirePadding, gateY, startX - wirePadding, wireY + wirePadding, 'register-classical');
    // Draw horizontal lines
    var hLine1 = (0, formatUtils_1.line)(startX + wirePadding, wireY - wirePadding, endX, wireY - wirePadding, 'register-classical');
    var hLine2 = (0, formatUtils_1.line)(startX - wirePadding, wireY + wirePadding, endX, wireY + wirePadding, 'register-classical');
    return (0, formatUtils_1.group)([vLine1, vLine2, hLine1, hLine2]);
};
exports._classicalRegister = _classicalRegister;
/**
 * Generates the SVG representation of a qubit register.
 *
 * @param qId         Qubit register index.
 * @param endX        End x coord.
 * @param y           y coord of wire.
 * @param labelOffset y offset for wire label.
 *
 * @returns SVG representation of the given qubit register.
 */
var _qubitRegister = function (qId, endX, y, labelOffset) {
    if (labelOffset === void 0) { labelOffset = 16; }
    var wire = (0, formatUtils_1.line)(constants_1.regLineStart, y, endX, y);
    var label = (0, formatUtils_1.text)("q".concat(qId), constants_1.regLineStart, y - labelOffset);
    label.setAttribute('dominant-baseline', 'hanging');
    label.setAttribute('text-anchor', 'start');
    label.setAttribute('font-size', '75%');
    return (0, formatUtils_1.group)([wire, label]);
};
exports._qubitRegister = _qubitRegister;
