import { Operation } from './circuit';
import { Metadata } from './metadata';
import { Sqore } from './sqore';
/**
 * Interface for context
 */
interface Context {
    addMode: boolean;
    operations: Operation[];
    operation: Operation | undefined;
    registerSize: number;
    container: HTMLElement | undefined;
}
/**
 * Interface for options provided through usePanel()
 */
interface PanelOptions {
    displaySize?: number;
    gateDictionary?: GateDictionary;
}
/**
 * Interface for dispatch
 */
interface Dispatch {
    (action: Action): void;
}
/**
 * Entry point to run extensionPanel
 * @param options   User-provided object to customize extensionPanel
 * @returns         Curried function of entry point to run extensionPanel
 */
declare const extensionPanel: (options?: PanelOptions | undefined) => (container: HTMLElement, sqore: Sqore, useRefresh: () => void) => void;
/**
 * Interface for action
 */
interface Action {
    type: string;
    payload?: unknown;
}
/**
 * Interface for option element
 */
interface Option {
    value: string;
    text: string;
}
/**
 * Interface for gate dictionary
 */
interface GateDictionary {
    [index: string]: Operation;
}
/**
 * Object exported for unit testing
 */
declare const exportedForTesting: {
    panel: (dispatch: Dispatch, context: Context, options?: PanelOptions | undefined) => HTMLElement;
    addPanel: (dispatch: Dispatch, context: Context, options?: PanelOptions | undefined) => HTMLElement;
    editPanel: (dispatch: Dispatch, context: Context) => HTMLElement;
    elem: (tag: string, className?: string | undefined) => HTMLElement;
    children: (parentElem: HTMLElement, childElems: HTMLElement[]) => HTMLElement;
    childrenSvg: (parentElem: SVGElement, childElems: SVGElement[]) => SVGElement;
    title: (text: string) => HTMLElement;
    select: (label: string, className: string, options: Option[], selectedIndex: number, dispatch: Dispatch, operation?: Operation | undefined) => HTMLElement;
    option: (value: string, text: string) => HTMLOptionElement;
    checkboxes: (label: string, className: string, options: Option[], selectedIndexes: number[], dispatch: Dispatch, operation?: Operation | undefined) => HTMLDivElement;
    checkbox: (value: string, text: string) => HTMLLabelElement;
    text: (label: string, className: string, dispatch: Dispatch, operation?: Operation | undefined) => HTMLElement;
    toMetadata: (operation: Operation | undefined, x: number, y: number) => Metadata;
    gate: (dispatch: Dispatch, gateDictionary: GateDictionary, type: string, x: number, y: number) => SVGElement;
    defaultGateDictionary: GateDictionary;
};
export { extensionPanel, PanelOptions, exportedForTesting, Dispatch, Action, Context as PanelContext };
