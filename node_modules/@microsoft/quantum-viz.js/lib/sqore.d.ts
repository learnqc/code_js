import { Circuit, Operation } from './circuit';
import { StyleConfig } from './styles';
/**
 * Defines the mapping of unique ID to each operation. Used for enabling
 * interactivity.
 */
type GateRegistry = {
    [id: string]: Operation;
};
/**
 * Entrypoint class for rendering circuit visualizations.
 */
export declare class Sqore {
    circuit: Circuit;
    style: StyleConfig;
    gateRegistry: GateRegistry;
    /**
     * Initializes Sqore object with custom styles.
     *
     * @param circuit Circuit to be visualized.
     * @param style Custom visualization style.
     */
    constructor(circuit: Circuit, style?: StyleConfig | string);
    /**
     * Render circuit into `container` at the specified layer depth.
     *
     * @param container HTML element for rendering visualization into.
     * @param renderDepth Initial layer depth at which to render gates.
     */
    draw(container: HTMLElement, renderDepth?: number): void;
    /**
     * Retrieve style for visualization.
     *
     * @param style Custom style or style name.
     *
     * @returns Custom style.
     */
    private getStyle;
    /**
     * Render circuit into `container`.
     *
     * @param container HTML element for rendering visualization into.
     * @param circuit Circuit object to be rendered.
     */
    private renderCircuit;
    /**
     * Generates the components required for visualization.
     *
     * @param circuit Circuit to be visualized.
     *
     * @returns `ComposedSqore` object containing metadata for visualization.
     */
    private compose;
    /**
     * Generates visualization of `composedSqore` as an SVG.
     *
     * @param composedSqore ComposedSqore to be visualized.
     *
     * @returns SVG representation of circuit visualization.
     */
    private generateSvg;
    /**
     * Depth-first traversal to assign unique ID to `operation`.
     * The operation is assigned the id `id` and its `i`th child is recursively given
     * the id `${id}-${i}`.
     *
     * @param operation Operation to be assigned.
     * @param id: ID to assign to `operation`.
     *
     */
    private fillGateRegistry;
    /**
     * Pick out operations that are at or below `renderDepth`.
     *
     * @param operations List of circuit operations.
     * @param renderDepth Initial layer depth at which to render gates.
     *
     * @returns List of operations at or below specifed depth.
     */
    private selectOpsAtDepth;
    /**
     * Add interactive click handlers to circuit HTML elements.
     *
     * @param container HTML element containing visualized circuit.
     * @param circuit Circuit to be visualized.
     *
     */
    private addGateClickHandlers;
    /**
     * Add interactive click handlers for classically-controlled operations.
     *
     * @param container HTML element containing visualized circuit.
     *
     */
    private addClassicalControlHandlers;
    /**
     * Add interactive click handlers for zoom-in/out functionality.
     *
     * @param container HTML element containing visualized circuit.
     * @param circuit Circuit to be visualized.
     *
     */
    private addZoomHandlers;
    /**
     * Expand selected operation for zoom-in interaction.
     *
     * @param operations List of circuit operations.
     * @param id ID of operation to expand.
     *
     */
    private expandOperation;
    /**
     * Collapse selected operation for zoom-out interaction.
     *
     * @param operations List of circuit operations.
     * @param id ID of operation to collapse.
     *
     */
    private collapseOperation;
}
export {};
