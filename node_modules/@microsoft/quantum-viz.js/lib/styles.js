"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.style = exports.STYLES = void 0;
var defaultStyle = {
    lineStroke: '#000000',
    lineWidth: 1,
    textColour: '#000000',
    unitary: '#D9F1FA',
    oplus: '#FFFFFF',
    measure: '#FFDE86',
    classicalUnknown: '#E5E5E5',
    classicalZero: '#C40000',
    classicalOne: '#4059BD',
    classicalZeroText: '#FFFFFF',
    classicalOneText: '#FFFFFF',
};
var blackAndWhiteStyle = {
    lineStroke: '#000000',
    lineWidth: 1,
    textColour: '#000000',
    unitary: '#FFFFFF',
    oplus: '#FFFFFF',
    measure: '#FFFFFF',
    classicalUnknown: '#FFFFFF',
    classicalZero: '#000000',
    classicalOne: '#000000',
    classicalZeroText: '#FFFFFF',
    classicalOneText: '#FFFFFF',
};
var invertedStyle = {
    lineStroke: '#FFFFFF',
    lineWidth: 1,
    textColour: '#FFFFFF',
    unitary: '#000000',
    oplus: '#000000',
    measure: '#000000',
    classicalUnknown: '#000000',
    classicalZero: '#FFFFFF',
    classicalOne: '#FFFFFF',
    classicalZeroText: '#000000',
    classicalOneText: '#000000',
};
/**
 * Set of default styles.
 */
exports.STYLES = {
    /** Default style with coloured gates. */
    Default: defaultStyle,
    /** Black and white style. */
    BlackAndWhite: blackAndWhiteStyle,
    /** Inverted black and white style (for black backgrounds). */
    Inverted: invertedStyle,
};
/**
 * CSS style script to be injected into visualization SVG.
 *
 * @param customStyle Custom style configuration.
 *
 * @returns String containing CSS style script.
 */
var style = function (customStyle) {
    if (customStyle === void 0) { customStyle = {}; }
    var styleConfig = __assign(__assign({}, defaultStyle), customStyle);
    return "".concat(_defaultGates(styleConfig), "\n    ").concat(_classicallyControlledGates(styleConfig), "\n    ").concat(_expandCollapse);
};
exports.style = style;
var _defaultGates = function (styleConfig) { return "\n    line,\n    circle,\n    rect {\n        stroke: ".concat(styleConfig.lineStroke, ";\n        stroke-width: ").concat(styleConfig.lineWidth, ";\n    }\n    text {\n        fill: ").concat(styleConfig.textColour, ";\n        dominant-baseline: middle;\n        text-anchor: middle;\n        font-family: Arial;\n    }\n    .control-dot {\n        fill: ").concat(styleConfig.lineStroke, ";\n    }\n    .oplus line, .oplus circle {\n        fill: ").concat(styleConfig.oplus, ";\n        stroke-width: 2;\n    }\n    .gate-unitary {\n        fill: ").concat(styleConfig.unitary, ";\n    }\n    .gate-measure {\n        fill: ").concat(styleConfig.measure, ";\n    }\n    rect.gate-swap {\n        fill: transparent;\n        stroke: transparent;\n    }\n    .arc-measure {\n        stroke: ").concat(styleConfig.lineStroke, ";\n        fill: none;\n        stroke-width: ").concat(styleConfig.lineWidth, ";\n    }\n    .register-classical {\n        stroke-width: ").concat((styleConfig.lineWidth || 0) / 2, ";\n    }"); };
var _classicallyControlledGates = function (styleConfig) {
    var gateOutline = "\n    .classically-controlled-one .classical-container,\n    .classically-controlled-one .classical-line {\n        stroke: ".concat(styleConfig.classicalOne, ";\n        stroke-width: ").concat((styleConfig.lineWidth || 0) + 0.3, ";\n        fill: ").concat(styleConfig.classicalOne, ";\n        fill-opacity: 0.1;\n    }\n    .classically-controlled-zero .classical-container,\n    .classically-controlled-zero .classical-line {\n        stroke: ").concat(styleConfig.classicalZero, ";\n        stroke-width: ").concat((styleConfig.lineWidth || 0) + 0.3, ";\n        fill: ").concat(styleConfig.classicalZero, ";\n        fill-opacity: 0.1;\n    }");
    var controlBtn = "\n    .classically-controlled-btn {\n        cursor: pointer;\n    }\n    .classically-controlled-unknown .classically-controlled-btn {\n        fill: ".concat(styleConfig.classicalUnknown, ";\n    }\n    .classically-controlled-one .classically-controlled-btn {\n        fill: ").concat(styleConfig.classicalOne, ";\n    }\n    .classically-controlled-zero .classically-controlled-btn {\n        fill: ").concat(styleConfig.classicalZero, ";\n    }");
    var controlBtnText = "\n    .classically-controlled-btn text {\n        dominant-baseline: middle;\n        text-anchor: middle;\n        stroke: none;\n        font-family: Arial;\n    }\n    .classically-controlled-unknown .classically-controlled-btn text {\n        fill: ".concat(styleConfig.textColour, ";\n    }\n    .classically-controlled-one .classically-controlled-btn text {\n        fill: ").concat(styleConfig.classicalOneText, ";\n    }\n    .classically-controlled-zero .classically-controlled-btn text {\n        fill: ").concat(styleConfig.classicalZeroText, ";\n    }");
    return "\n    .hidden {\n        display: none;\n    }\n    .classically-controlled-unknown {\n        opacity: 0.25;\n    }\n\n    ".concat(gateOutline, "\n    ").concat(controlBtn, "\n    ").concat(controlBtnText);
};
var _expandCollapse = "\n    .qviz .gate-collapse,\n    .qviz .gate-expand {\n        opacity: 0;\n        transition: opacity 1s;\n    }\n\n    .qviz:hover .gate-collapse,\n    .qviz:hover .gate-expand {\n        visibility: visible;\n        opacity: 0.2;\n        transition: visibility 1s;\n        transition: opacity 1s;\n    }\n\n    .gate-expand, .gate-collapse {\n        cursor: pointer;\n    }\n\n    .gate-collapse circle,\n    .gate-expand circle {\n        fill: white;\n        stroke-width: 2px;\n        stroke: black;\n    }\n    .gate-collapse path,\n    .gate-expand path {\n        stroke-width: 4px;\n        stroke: black;\n    }\n\n    .gate:hover > .gate-collapse,\n    .gate:hover > .gate-expand {\n        visibility: visible;\n        opacity: 1;\n        transition: opacity 1s;\n    }";
