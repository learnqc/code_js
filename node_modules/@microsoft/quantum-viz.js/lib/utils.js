"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports._getStringWidth = exports.getGateWidth = exports.createUUID = void 0;
var metadata_1 = require("./metadata");
var constants_1 = require("./constants");
/**
 * Generate a UUID using `Math.random`.
 * Note: this implementation came from https://stackoverflow.com/questions/105034/how-to-create-guid-uuid
 * and is not cryptographically secure but works for our use case.
 *
 * @returns UUID string.
 */
var createUUID = function () {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;
        return v.toString(16);
    });
};
exports.createUUID = createUUID;
/**
 * Calculate the width of a gate, given its metadata.
 *
 * @param metadata Metadata of a given gate.
 *
 * @returns Width of given gate (in pixels).
 */
var getGateWidth = function (_a) {
    var type = _a.type, label = _a.label, displayArgs = _a.displayArgs, width = _a.width;
    if (width > 0)
        return width;
    switch (type) {
        case metadata_1.GateType.Measure:
        case metadata_1.GateType.Cnot:
        case metadata_1.GateType.Swap:
            return constants_1.minGateWidth;
        default:
            var labelWidth = _getStringWidth(label);
            var argsWidth = displayArgs != null ? _getStringWidth(displayArgs, constants_1.argsFontSize) : 0;
            var textWidth = Math.max(labelWidth, argsWidth) + constants_1.labelPadding * 2;
            return Math.max(constants_1.minGateWidth, textWidth);
    }
};
exports.getGateWidth = getGateWidth;
/**
 * Get the width of a string with font-size `fontSize` and font-family Arial.
 *
 * @param text     Input string.
 * @param fontSize Font size of `text`.
 *
 * @returns Pixel width of given string.
 */
var _getStringWidth = function (text, fontSize) {
    if (fontSize === void 0) { fontSize = constants_1.labelFontSize; }
    var canvas = document.createElement('canvas');
    var context = canvas.getContext('2d');
    if (context == null)
        throw new Error('Null canvas');
    context.font = "".concat(fontSize, "px Arial");
    var metrics = context.measureText(text);
    return metrics.width;
};
exports._getStringWidth = _getStringWidth;
